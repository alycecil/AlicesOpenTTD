grf {
	grfid: "GGQT";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	url: string(STR_GRF_DOCS_URL);
	version: 5;
	min_compatible_version: 1;


 param 0 {
 
  restrict_open_during_gameplay {
   name: string(STR_PARAM_NAME_NO_OPENINGS);
   desc: string(STR_PARAM_DESC_NO_OPENINGS);
   type: bool;
   bit: 0;
  }
 }

 param 1 {
  marine_industry_max_coastal_distance {
   name: string(STR_PARAM_NAME_COAST_DISTANCE_MARINE_INDUSTRY);
   desc: string(STR_PARAM_DESC_COAST_DISTANCE_MARINE_INDUSTRY);
   type: int;
   def_value: 0;
   min_value: 0;
   max_value: 255;
   names: {
    0: string(STR_PARAM_VALUE_SECONDARY_NEVER_CLOSE_0);
   };
  }
 }
}

param_max_coastal_distance = marine_industry_max_coastal_distance;
if (marine_industry_max_coastal_distance == 0) {
 param_max_coastal_distance = 255;
}

disable_item(FEAT_INDUSTRIES, 0, 36);if (ttd_platform != PLATFORM_OPENTTD || openttd_version < version_openttd(1, 7, 0, 27769)) {
	error(FATAL, REQUIRES_OPENTTD, string(STR_ERR_OPENTTD_VERSION));
	exit;
}
    if (grf_future_status("\F1\25\00\05")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS v1"));
    }
    if (grf_future_status("\F1\25\00\06")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS v2"));
    }
    if (grf_future_status("\F1\25\00\07")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "FIRS v3"));
    }
    if (grf_future_status("mb\07\00")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Alpine Climate"));
    }
    if (grf_future_status("\45\4E\15\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Apollo Rocket Industry Set"));
    }
    if (grf_future_status("\47\47\01\04")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Australian Industries"));
    }
    if (grf_future_status("\47\47\20\30")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Australian Industries Set AuzIn"));
    }
    if (grf_future_status("\47\47\20\31")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Australian Industry AuzInd2"));
    }
    if (grf_future_status("\47\47\60\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Australian Industry AuzInd6"));
    }
    if (grf_future_status("\42\58\00\02")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "BSPI"));
    }
    if (grf_future_status("Meo\97")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Agricultural Vector"));
    }
    if (grf_future_status("Meo\98")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic for Arctic"));
    }
    if (grf_future_status("Meo\99")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic for Tropic"));
    }
    if (grf_future_status("Meo\92")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic Vector"));
    }
    if (grf_future_status("Meo\93")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemical Vector"));
    }
    if (grf_future_status("Meo\9B")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Construction Vector by Pikkabird"));
    }
    if (grf_future_status("Meo\9C")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemical Vector II"));
    }
    if (grf_future_status("Meo\96")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Construction Vector"));
    }
    if (grf_future_status("Meo\94")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Machinery Vector"));
    }
    if (grf_future_status("Meo\9A")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Machinery for Tropic"));
    }
    if (grf_future_status("Meo\91")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Town Vector"));
    }
    if (grf_future_status("Meo\95")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Wood Vector"));
    }
    if (grf_future_status("EX\01\02")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Ex Citybuilder"));
    }
    if (grf_future_status("EX\01\03")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Ex Citybuilder"));
    }
    if (grf_future_status("EH\01\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Experts hard industries"));
    }
    if (grf_future_status("\52\53\01\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Improved Oil Rig Layout"));
    }
    if (grf_future_status("SK\05\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));
    }
    if (grf_future_status("JS\0A\02")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));
    }
    if (grf_future_status("JS\0A\03")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));
    }
    if (grf_future_status("JS\0A\04")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));
    }
    if (grf_future_status("JS\0A\05")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));
    }
    if (grf_future_status("frMI")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Manual Industries"));
    }
    if (grf_future_status("AL\01\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Nearby Station Names"));
    }
    if (grf_future_status("Meo\81")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "New Cargos"));
    }
    if (grf_future_status("Meo\82")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "New Cargos Petrol + Tourists"));
    }
    if (grf_future_status("mb\08\00")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "NewCargos by Michael Blunck"));
    }
    if (grf_future_status("\4E\4D\11\13")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "North American Industry Set"));
    }
    if (grf_future_status("SZ\13D")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Oil well decrease neutralizer"));
    }
    if (grf_future_status("OG+3")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "OpenGFX+ Industries"));
    }
    if (grf_future_status("DD\06\02")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Pikka Basic Industries"));
    }
    if (grf_future_status("\31\ff\05\03")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Stock Piled industries 1.1"));
    }
    if (grf_future_status("\31\ff\05\04")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Stock Piled industries 1.2"));
    }
    if (grf_future_status("\31\ff\05\05")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Stock Piled industries 1.3"));
    }
    if (grf_future_status("SLTU")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Tourist Set"));
    }
    if (grf_future_status("DD\06\03")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "UKRS Brick Chain"));
    }
    if (grf_future_status("DD\06\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "UKRS Industries"));
    }
    if (grf_future_status("\42\58\00\02")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Vanilla Industries in Stockpiling mode"));
    }

    if (grf_future_status("EN\31\01")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "North Korean Industry Set v1"));
    }
    if (grf_future_status("EN\31\02")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "North Korean Industry Set v2"));
    }
    if (grf_future_status("EN\31\03")) {
        error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "North Korean Industry Set v1 Fix"));
    }


/********************************************
 * CARGO TABLES
*********************************************/

cargotable {
 
        BDMT,
        BEER,
        CLAY,
        CMNT,
        COAL,
        COPR,
        CORE,
        URAN,
        FISH,
        MAIZ,
        FOOD,
        FRUT,
        GLAS,
        GOOD,
        GRAI,
        GRVL,
        IORE,
        LIME,
        LVST,
        MAIL,
        MILK,
        OIL_,
        PAPR,
        PASS,
        PCL_,
        PETR,
        SAND,
        SCMT,
        STEL,
        VALU,
        WDPR,
        WOOD,
        WOOL,
        OTI1,
	OTI2,
	FRVG,
	FICR,
	AORE,
	NKOR,
	SULP,
	RUBR,
	VEHI,
        PIPE,
	BAKE,
	OYST,
	MEAT,
	CHSE,
	FURN,
	TEXT,
	SEED,
	FERT,
	BOOM,
	ACID,
	CHLO,
	SLAG,
	TWOD,
	SESP,
	FUEL,
	ELTR,
	WATR,
	TATO,
	POWR,
	MPTS,
	RFPR,

}

    spriteset(cargoicon_passengers) { [10 + 20 * 0, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, passengers, 0) {
        property {
            number: 0;
            type_name: TTD_STR_CARGO_PLURAL_PASSENGERS;
            unit_name: TTD_STR_CARGO_SINGULAR_PASSENGER;
            type_abbreviation: TTD_STR_ABBREV_PASSENGERS;
            sprite: NEW_CARGO_SPRITE;
            weight: 0.0625;
            station_list_colour: 152;
            cargo_payment_list_colour: 152;
            is_freight: 0;
            cargo_classes: bitmask(CC_PASSENGERS);
            cargo_label: "PASS";
            town_growth_effect: TOWNGROWTH_PASSENGERS;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_PASSENGERS;
            items_of_cargo: TTD_STR_QUANTITY_PASSENGERS;
            penalty_lowerbound: 0;
            single_penalty_length: 22;
            price_factor: 101.749420166;
            capacity_multiplier: 4;
        }
        graphics {
            cargoicon_passengers;
        }
    }

    spriteset(cargoicon_coal) { [10 + 20 * 1, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, coal, 1) {
        property {
            number: 1;
            type_name: TTD_STR_CARGO_PLURAL_COAL;
            unit_name: TTD_STR_CARGO_SINGULAR_COAL;
            type_abbreviation: TTD_STR_ABBREV_COAL;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 5;
            cargo_payment_list_colour: 5;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "COAL";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: TTD_STR_QUANTITY_COAL;
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 74.2692947388;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_coal;
        }
    }

    spriteset(cargoicon_mail) { [10 + 20 * 2, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, mail, 2) {
        property {
            number: 2;
            type_name: TTD_STR_CARGO_PLURAL_MAIL;
            unit_name: TTD_STR_CARGO_SINGULAR_MAIL;
            type_abbreviation: TTD_STR_ABBREV_MAIL;
            sprite: NEW_CARGO_SPRITE;
            weight: 0.25;
            station_list_colour: 15;
            cargo_payment_list_colour: 15;
            is_freight: 0;
            cargo_classes: bitmask(CC_MAIL);
            cargo_label: "MAIL";
            town_growth_effect: TOWNGROWTH_MAIL;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_BAGS;
            items_of_cargo: TTD_STR_QUANTITY_MAIL;
            penalty_lowerbound: 6;
            single_penalty_length: 24;
            price_factor: 143.869400024;
            capacity_multiplier: 2;
        }
        graphics {
            cargoicon_mail;
        }
    }

    spriteset(cargoicon_oil) { [10 + 20 * 3, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


item(FEAT_CARGOS, oil, 3) {
        property {
            number: 3;
            type_name: TTD_STR_CARGO_PLURAL_OIL;
            unit_name: TTD_STR_CARGO_SINGULAR_OIL;
            type_abbreviation: TTD_STR_ABBREV_OIL;
            sprite: NEW_CARGO_SPRITE;
            weight: 0.875;
            station_list_colour: 1;
            cargo_payment_list_colour: 1;
            is_freight: 1;
            cargo_classes: bitmask(CC_LIQUID,CC_HAZARDOUS);
            cargo_label: "OIL_";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_LITERS;
	    items_of_cargo:  string(STR_CARGO_UNIT_OIL);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 93.3108329773;
            capacity_multiplier: 1;
        }
        graphics {
            
            cargoicon_oil;
        }
    }

    spriteset(cargoicon_lime) { [10 + 20 * 0, 10 + 20 * 4, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, lime, 4) {
        property {
            number: 4;
            type_name: string(STR_CARGO_NAME_LIMESTONE);
            unit_name: string(STR_CARGO_NAME_LIMESTONE);
            type_abbreviation:  string(STR_CID_LIMESTONE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 8;
            cargo_payment_list_colour: 8;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "LIME";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo:  string(STR_CARGO_UNIT_LIME);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 74.2692947388;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_lime;
        }
    }

    spriteset(cargoicon_goods) { [10 + 20 * 5, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, goods, 5) {
        property {
            number: 5;
            type_name: TTD_STR_CARGO_PLURAL_GOODS;
            unit_name: TTD_STR_CARGO_SINGULAR_GOODS;
            type_abbreviation: TTD_STR_ABBREV_GOODS;
            sprite: NEW_CARGO_SPRITE;
            weight: 0.5;
            station_list_colour: 194;
            cargo_payment_list_colour: 194;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS);
            cargo_label: "GOOD";
            town_growth_effect: TOWNGROWTH_WATER;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_CRATES;
            items_of_cargo: TTD_STR_QUANTITY_GOODS;
            penalty_lowerbound: 5;
            single_penalty_length: 24;
            price_factor: 149.4140625;
            capacity_multiplier: 2;
        }
        graphics {
            cargoicon_goods;
        }
    }

    spriteset(cargoicon_grain) { [10 + 20 * 6, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, grain, 6) {
        property {
            number: 6;
            type_name: TTD_STR_CARGO_PLURAL_GRAIN;
            unit_name: TTD_STR_CARGO_SINGULAR_GRAIN;
            type_abbreviation: TTD_STR_ABBREV_GRAIN;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 186;
            cargo_payment_list_colour: 186;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_COVERED);
            cargo_label: "GRAI";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: TTD_STR_QUANTITY_GRAIN;
            penalty_lowerbound: 4;
            single_penalty_length: 40;
            price_factor: 116.194725037;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_grain;
        }
    }


    spriteset(cargoicon_wood) { [10 + 20 * 8, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, wood, 7) {
        property {
            number: 7;
            type_name: TTD_STR_CARGO_PLURAL_WOOD;
            unit_name: TTD_STR_CARGO_SINGULAR_WOOD;
            type_abbreviation: TTD_STR_ABBREV_WOOD;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 53;
            cargo_payment_list_colour: 53;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS);
            cargo_label: "WOOD";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: TTD_STR_QUANTITY_WOOD;
            penalty_lowerbound: 24;
            single_penalty_length: 255;
            price_factor: 97.3963737488;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_wood;
        }
    }

    spriteset(cargoicon_iron_ore) { [10 + 20 * 9, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, iron_ore, 8) {
        property {
            number: 8;
            type_name: TTD_STR_CARGO_PLURAL_IRON_ORE;
            unit_name: TTD_STR_CARGO_SINGULAR_IRON_ORE;
            type_abbreviation: TTD_STR_ABBREV_IRON_ORE;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 20;
            cargo_payment_list_colour: 20;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "IORE";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: TTD_STR_QUANTITY_IRON_ORE;
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 75.4852294922;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_iron_ore;
        }
    }

    spriteset(cargoicon_metal) { [10 + 20 * 10, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, metal, 9) {
        property {
            number: 9;
            type_name: string(STR_CARGO_NAME_METAL);
            unit_name: string(STR_CARGO_NAME_METAL);
            type_abbreviation: string(STR_CID_METAL);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 10;
            cargo_payment_list_colour: 10;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS);
            cargo_label: "STEL";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_METAL);
            penalty_lowerbound: 7;
            single_penalty_length: 255;
            price_factor: 126.165390015;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_metal;
        }
    }

    spriteset(cargoicon_milk) { [10 + 20 * 13, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, milk, 10) {
        property {
            number: 10;
            type_name: string(STR_CARGO_NAME_MILK);
            unit_name: string(STR_CARGO_NAME_MILK);
            type_abbreviation: string(STR_CID_MILK);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0625;
            station_list_colour: 161;
            cargo_payment_list_colour: 161;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_LIQUID, CC_REFRIGERATED);
            cargo_label: "MILK";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 82;
            items_of_cargo: string(STR_CARGO_UNIT_MILK);
            penalty_lowerbound: 0;
            single_penalty_length: 20;
            price_factor: 134.579658508;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_milk;
        }
    }

    spriteset(cargoicon_food) { [10 + 20 * 12, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, food, 11) {
        property {
            number: 11;
            type_name: TTD_STR_CARGO_PLURAL_FOOD;
            unit_name: TTD_STR_CARGO_SINGULAR_FOOD;
            type_abbreviation: TTD_STR_ABBREV_FOOD;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 48;
            cargo_payment_list_colour: 48;
            is_freight: 1;
            cargo_classes: bitmask(CC_REFRIGERATED, CC_EXPRESS);
            cargo_label: "FOOD";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 94;
            items_of_cargo: TTD_STR_QUANTITY_FOOD;
            penalty_lowerbound: 0;
            single_penalty_length: 24;
            price_factor: 149.803161621;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_food;
        }
    }

    spriteset(cargoicon_paper) { [10 + 20 * 5, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, paper, 12) {
        property {
            number: 12;
            type_name: TTD_STR_CARGO_PLURAL_PAPER;
            unit_name: TTD_STR_CARGO_SINGULAR_PAPER;
            type_abbreviation: TTD_STR_ABBREV_PAPER;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 23;
            cargo_payment_list_colour: 23;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
            cargo_label: "PAPR";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: TTD_STR_QUANTITY_PAPER;
            penalty_lowerbound: 7;
            single_penalty_length: 60;
            price_factor: 134.506702423;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_paper;
        }
    }

    spriteset(cargoicon_fish) { [10 + 20 * 15, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, fish, 13) {
        property {
            number: 13;
            type_name: string(STR_CARGO_NAME_FISH);
            unit_name: string(STR_CARGO_NAME_FISH);
            type_abbreviation: string(STR_CID_FISH);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 149;
            cargo_payment_list_colour: 149;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_REFRIGERATED);
            cargo_label: "FISH";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_FISH);
            penalty_lowerbound: 12;
            single_penalty_length: 30;
            price_factor: 143.869400024;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_fish;
        }
    }

    spriteset(cargoicon_wool) { [10 + 20 * 4, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, wool, 14) {
        property {
            number: 14;
            type_name: string(STR_CARGO_NAME_WOOL);
            unit_name: string(STR_CARGO_NAME_WOOL);
            type_abbreviation: string(STR_CID_WOOL);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.2;
            station_list_colour: 135;
            cargo_payment_list_colour: 135;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
            cargo_label: "WOOL";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_WOOL);
            penalty_lowerbound: 8;
            single_penalty_length: 90;
            price_factor: 105.202674866;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_wool;
        }
    }

    spriteset(cargoicon_clay) { [10 + 20 * 9, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, clay, 15) {
        property {
            number: 15;
            type_name: string(STR_CARGO_NAME_CLAY);
            unit_name: string(STR_CARGO_NAME_CLAY);
            type_abbreviation: string(STR_CID_CLAY);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 37;
            cargo_payment_list_colour: 37;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_COVERED);
            cargo_label: "CLAY";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_CLAY);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 72.9804039001;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_clay;
        }
    }

    spriteset(cargoicon_sand) { [10 + 20 * 0, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, sand, 16) {
        property {
            number: 16;
            type_name: string(STR_CARGO_NAME_SAND);
            unit_name: string(STR_CARGO_NAME_SAND);
            type_abbreviation: string(STR_CID_SAND);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 196;
            cargo_payment_list_colour: 196;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "SAND";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_SAND);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 73.2479095459;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_sand;
        }
    }

    spriteset(cargoicon_timber) { [10 + 20 * 6, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, timber, 17) {
        property {
            number: 17;
            type_name: string(STR_CARGO_NAME_TIMBER);
            unit_name: string(STR_CARGO_NAME_TIMBER);
            type_abbreviation: string(STR_CID_TIMBER);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 58;
            cargo_payment_list_colour: 58;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_PIECE_GOODS);
            cargo_label: "WDPR";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_TIMBER);
            penalty_lowerbound: 12;
            single_penalty_length: 255;
            price_factor: 125.533103943;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_timber;
        }
    }


   spriteset(cargoicon_parcels) { [10 + 20 * 7, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

                
    item(FEAT_CARGOS, parcels, 18) {
        property {
            number: 18;
            type_name: string(STR_CARGO_NAME_PARCELS);
            unit_name: string(STR_CARGO_NAME_PARCELS);
            type_abbreviation: string(STR_CID_PARCELS);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.1;
            station_list_colour: 197;
            cargo_payment_list_colour: 197;
            is_freight: 0;
            cargo_classes: bitmask(CC_MAIL, CC_EXPRESS, CC_PIECE_GOODS);
            cargo_label: "PCL_";
            town_growth_effect: TOWNGROWTH_MAIL;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_CRATES;
            items_of_cargo: string(STR_CARGO_UNIT_PARCELS);
            penalty_lowerbound: 6;
            single_penalty_length: 24;
            price_factor: 149.869400024;
            capacity_multiplier: 2;
        }
        graphics {
            cargoicon_parcels;
        }
    }

    spriteset(cargoicon_stone) { [10 + 20 * 5, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, stone, 19) {
        property {
            number: 19;
            type_name: string(STR_CARGO_NAME_STONE);
            unit_name: string(STR_CARGO_NAME_STONE);
            type_abbreviation: string(STR_CID_STONE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 38;
            cargo_payment_list_colour: 38;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "GRVL";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_STONE);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 74.1233825684;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_stone;
        }
    }

    spriteset(cargoicon_fruit) { [10 + 20 * 14, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, fruit, 20) {
        property {
            number: 20;
            type_name: string(STR_CARGO_NAME_FRUITS);
            unit_name: string(STR_CARGO_NAME_FRUITS);
	    type_abbreviation: string(STR_CID_FRUITS);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 181;
            cargo_payment_list_colour: 181;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
            cargo_label: "FRUT";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_FRUITS);
            penalty_lowerbound: 0;
            single_penalty_length: 26;
            price_factor: 119.696617126;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_fruit;
        }
    }

    spriteset(cargoicon_building_materials) { [10 + 20 * 1, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

               
    item(FEAT_CARGOS, building_materials, 21) {
        property {
            number: 21;
            type_name: string(STR_CARGO_NAME_BUILDING_MATERIALS);
            unit_name: string(STR_CARGO_NAME_BUILDING_MATERIALS);
            type_abbreviation: string(STR_CID_BUILDING_MATERIALS);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 44;
            cargo_payment_list_colour: 44;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS, CC_BULK);
            cargo_label: "BDMT";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_BUILDING_MATERIALS);
            penalty_lowerbound: 12;
            single_penalty_length: 255;
            price_factor: 136.233329773;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_building_materials;
        }
    }

     spriteset(cargoicon_alcohol) { [10 + 20 * 7, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

                
    item(FEAT_CARGOS, alcohol, 22) {
        property {
            number: 22;
            type_name: string(STR_CARGO_NAME_ALCOHOL);
            unit_name: string(STR_CARGO_NAME_ALCOHOL);
            type_abbreviation: string(STR_CID_ALCOHOL);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 180;
            cargo_payment_list_colour: 180;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_LIQUID);
            cargo_label: "BEER";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 82;
            items_of_cargo: string(STR_CARGO_UNIT_ALCOHOL);
            penalty_lowerbound: 0;
            single_penalty_length: 24;
            price_factor: 145.9608078;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_alcohol;
        }
    }

    spriteset(cargoicon_fodder) { [10 + 20 * 10, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


     item(FEAT_CARGOS, fodder, 23) {
        property {
            number: 23;
            type_name: string(STR_CARGO_NAME_FODDER);
            unit_name: string(STR_CARGO_NAME_FODDER);
            type_abbreviation: string(STR_CID_FODDER);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.5625;
            station_list_colour: 75;
            cargo_payment_list_colour: 75;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_COVERED);
            cargo_label: "MAIZ";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 84;
            items_of_cargo: string(STR_CARGO_UNIT_FODDER);
            penalty_lowerbound: 4;
            single_penalty_length: 40;
            price_factor: 103;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_fodder;
        }
    }

    spriteset(cargoicon_cement) { [10 + 20 * 8, 10 + 20 * 3, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, cement, 24) {
        property {
            number: 24;
            type_name: string(STR_CARGO_NAME_CEMENT);
            unit_name: string(STR_CARGO_NAME_CEMENT);
            type_abbreviation: string(STR_CID_CEMENT);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 46;
            cargo_payment_list_colour: 46;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_COVERED);
            cargo_label: "CMNT";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_CEMENT);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 70.9804039001;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_cement;
        }
    }

    spriteset(cargoicon_glass) { [10 + 20 * 2, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

               
    item(FEAT_CARGOS, glass, 25) {
        property {
            number: 25;
            type_name: string(STR_CARGO_NAME_GLASS);
            unit_name: string(STR_CARGO_NAME_GLASS);
            type_abbreviation: string(STR_CID_GLASS);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 210;
            cargo_payment_list_colour: 210;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS, CC_BULK);
            cargo_label: "GLAS";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_GLASS);
            penalty_lowerbound: 12;
            single_penalty_length: 255;
            price_factor: 136.233329773;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_glass;
        }
    }

    spriteset(cargoicon_livestock) { [10 + 20 * 4, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, livestock, 26) {
        property {
            number: 26;
            type_name: TTD_STR_CARGO_PLURAL_LIVESTOCK;
            unit_name: TTD_STR_CARGO_SINGULAR_LIVESTOCK;
            type_abbreviation: TTD_STR_ABBREV_LIVESTOCK;
            sprite: NEW_CARGO_SPRITE;
            weight: 0.1875;
            station_list_colour: 79;
            cargo_payment_list_colour: 79;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS);
            cargo_label: "LVST";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_ITEMS;
            items_of_cargo: TTD_STR_QUANTITY_LIVESTOCK;
            penalty_lowerbound: 0;
            single_penalty_length: 22;
            price_factor: 124.073982239;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_livestock;
        }
    }

    spriteset(cargoicon_petrol) { [10 + 20 * 12, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, petrol, 27) {
        property {
            number: 27;
            type_name: string(STR_CARGO_NAME_PETROL);
            unit_name: string(STR_CARGO_NAME_PETROL);
            type_abbreviation: string(STR_CID_PETROL);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.6875;
            station_list_colour: 175;
            cargo_payment_list_colour: 175;
            is_freight: 1;
            cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
            cargo_label: "PETR";
            town_growth_effect: TOWNGROWTH_GOODS;
            town_growth_multiplier: 1.0;
            units_of_cargo: 82;
            items_of_cargo: string(STR_CARGO_UNIT_PETROL);
            penalty_lowerbound: 18;
            single_penalty_length: 255;
            price_factor: 126.749038696;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_petrol;
        }
    }

    spriteset(cargoicon_vegetables) { [10 + 20 * 14, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, vegetables, 28) {
        property {
            number: 28;
            type_name: string(STR_CARGO_NAME_VEGETABLES);
            unit_name: string(STR_CARGO_NAME_VEGETABLES);
            type_abbreviation: string(STR_CID_VEGETABLES);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 82;
            cargo_payment_list_colour: 82;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
            cargo_label: "FRVG";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_VEGETABLES);
            penalty_lowerbound: 0;
            single_penalty_length: 26;
            price_factor: 119.696617126;
            capacity_multiplier: 1;

        }
        graphics {
            cargoicon_vegetables;
        }
    }

    spriteset(cargoicon_cotton) { [10 + 20 * 3, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, cotton, 29) {
        property {
            number: 29;
            type_name: string(STR_CARGO_NAME_COTTON);
            unit_name: string(STR_CARGO_NAME_COTTON);
            type_abbreviation: string(STR_CID_COTTON);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.2;
            station_list_colour: 12;
            cargo_payment_list_colour: 12;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_PIECE_GOODS, CC_COVERED);
            cargo_label: "FICR";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_COTTON);
            penalty_lowerbound: 10;
            single_penalty_length: 36;
            price_factor: 107.634544373;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_cotton;
        }
    }

    spriteset(cargoicon_workers) { [10 + 20 * 1, 10 + 20 * 6, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, workers, 30) {
        property {
            number: 30;
            type_name: string(STR_CARGO_NAME_WORKERS);
            unit_name: string(STR_CARGO_NAME_WORKERS);
            type_abbreviation: string(STR_CID_WORKERS);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.0625;
            station_list_colour: 154;
            cargo_payment_list_colour: 154;
            is_freight: 0;
            cargo_classes: bitmask(CC_PASSENGERS);
            cargo_label: "OTI1";
            town_growth_effect: TOWNGROWTH_PASSENGERS;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_PASSENGERS;
            items_of_cargo: string(STR_CARGO_UNIT_WORKERS);
            penalty_lowerbound: 0;
            single_penalty_length: 22;
            price_factor: 101.749420166;
            capacity_multiplier: 4;
        }
        graphics {
            cargoicon_workers;
        }
    }


    spriteset(cargoicon_copper_ore) { [10 + 20 * 1, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, copper_ore, 31) {
        property {
            number: 31;
            type_name: string(STR_CARGO_NAME_COPPER_ORE);
            unit_name: string(STR_CARGO_NAME_COPPER_ORE);
            type_abbreviation: string(STR_CID_COPPER_ORE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 118;
            cargo_payment_list_colour: 118;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "CORE";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: string(STR_CARGO_UNIT_COPPER_ORE);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 75.4852294922;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_copper_ore;
        }
    }

    spriteset(cargoicon_waste) { [10 + 20 * 12, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


     item(FEAT_CARGOS, waste, 32) {
        property {
            number: 32;
            type_name: string(STR_CARGO_NAME_WASTE);
            unit_name: string(STR_CARGO_NAME_WASTE);
            type_abbreviation: string(STR_CID_WASTE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 106;
            cargo_payment_list_colour: 106;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_NON_POURABLE);
            cargo_label: "SCMT";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_WASTE);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 126.846313477;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_waste;
        }
    }

    spriteset(cargoicon_copper) { [10 + 20 * 8, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, copper, 33) {
        property {
            number: 33;
            type_name: string(STR_CARGO_NAME_COPPER);
            unit_name: string(STR_CARGO_NAME_COPPER);
            type_abbreviation: string(STR_CID_COPPER);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 59;
            cargo_payment_list_colour: 59;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS);
            cargo_label: "COPR";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_COPPER);
            penalty_lowerbound: 7;
            single_penalty_length: 255;
            price_factor: 126.165390015;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_copper;
        }
    }

    spriteset(cargoicon_uranium) { [10 + 20 * 13, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, uranium, 34) {
        property {
            number: 34;
            type_name: string(STR_CARGO_NAME_URANIUM);
            unit_name: string(STR_CARGO_NAME_URANIUM);
            type_abbreviation: string(STR_CID_URANIUM);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 118;
            cargo_payment_list_colour: 118;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_HAZARDOUS);
            cargo_label: "URAN";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: string(STR_CARGO_UNIT_URANIUM);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 75.4852294922;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_uranium;
        }
    }

    spriteset(cargoicon_valuables) { [10 + 20 * 3, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, valuables, 35) {
        property {
            number: 35;
            type_name: string(STR_CARGO_NAME_VALUABLES);
            unit_name: string(STR_CARGO_NAME_VALUABLES);
            type_abbreviation: string(STR_CID_VALUABLES);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 202;
            cargo_payment_list_colour: 202;
            is_freight: 1;
            cargo_classes: bitmask(CC_ARMOURED);
            cargo_label: "VALU";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_BAGS;
            items_of_cargo: string(STR_CARGO_UNIT_VALUABLES);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 172;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_valuables;
        }
    }

    spriteset(cargoicon_bauxite) { [10 + 20 * 13, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, bauxite, 36) {
        property {
            number: 36;
            type_name: string(STR_CARGO_NAME_BAUXITE);
            unit_name: string(STR_CARGO_NAME_BAUXITE);
            type_abbreviation: string(STR_CID_BAUXITE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 84;
            cargo_payment_list_colour: 84;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "AORE";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_BAUXITE);
            penalty_lowerbound: 30;
            single_penalty_length: 255;
            price_factor: 82.5862884521;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_bauxite;
        }
    }

    spriteset(cargoicon_tourists) { [10 + 20 * 2, 10 + 20 * 6, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, tourists, 37) {
        property {
            number: 37;
            type_name: string(STR_CARGO_NAME_TOURISTS);
            unit_name: string(STR_CARGO_NAME_TOURISTS);
            type_abbreviation: string(STR_CID_TOURISTS);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.0625;
            station_list_colour: 156;
            cargo_payment_list_colour: 156;
            is_freight: 0;
            cargo_classes: bitmask(CC_PASSENGERS);
            cargo_label: "OTI2";
            town_growth_effect: TOWNGROWTH_PASSENGERS;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_PASSENGERS;
            items_of_cargo: string(STR_CARGO_UNIT_TOURISTS);
            penalty_lowerbound: 0;
            single_penalty_length: 22;
            price_factor: 101.749420166;
            capacity_multiplier: 4;
        }
        graphics {
            cargoicon_tourists;
        }
    }

    spriteset(cargoicon_nickel) {
        [10 + 20 * 14, 10 + 20 * 5, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, nickel, 38) {
    property {
        type_name: string(STR_CARGO_NAME_NICKEL);
        unit_name: string(STR_CARGO_NAME_NICKEL);
        type_abbreviation: string(STR_CID_NICKEL);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_NICKEL);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 214;
        station_list_colour: 214;
        price_factor: 75;
        cargo_label: "NKOR";
        number: 38;
    }
    graphics {
        cargoicon_nickel;
    }
}

    spriteset(cargoicon_sulphur) {
        [10 + 20 * 13, 10 + 20 * 3, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, sulphur, 39) {
    property {
        type_name: string(STR_CARGO_NAME_SULPHUR);
        unit_name: string(STR_CARGO_NAME_SULPHUR);
        type_abbreviation: string(STR_CID_SULPHUR);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_LIQUID, CC_COVERED);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_SULPHUR);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 116;
        station_list_colour: 116;
        price_factor: 98;
        cargo_label: "SULP";
        number: 39;
    }
    graphics {
        cargoicon_sulphur;
    }
}

    spriteset(cargoicon_rubber) { [10 + 20 * 2, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, rubber, 40) {
        property {
            number: 40;
            type_name: TTD_STR_CARGO_PLURAL_RUBBER;
            unit_name: TTD_STR_CARGO_SINGULAR_RUBBER;
            type_abbreviation: TTD_STR_ABBREV_RUBBER;
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 06;
            cargo_payment_list_colour: 06;
            is_freight: 1;
            cargo_classes: bitmask(CC_LIQUID);
            cargo_label: "RUBR";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: TTD_STR_QUANTITY_RUBBER;
            penalty_lowerbound: 10;
            single_penalty_length: 36;
            price_factor: 107.634544373;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_rubber;
        }
    }

    spriteset(cargoicon_vehicles) {
        [10 + 20 * 15, 10 + 20 * 2, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, vehicles, 41) {
    property {
        type_name: string(STR_CARGO_NAME_VEHICLES);
        unit_name: string(STR_CARGO_NAME_VEHICLES);
        type_abbreviation: string(STR_CID_VEHICLES);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS);
        town_growth_effect: TOWNGROWTH_WATER;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_VEHICLES);
        penalty_lowerbound: 30;
        single_penalty_length: 128;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 40;
        station_list_colour: 40;
        price_factor: 185;
        cargo_label: "VEHI";
        number: 41;
    }
    graphics {
        cargoicon_vehicles;
    }
}

    spriteset(cargoicon_flour) { [10 + 20 * 11, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, flour, 42) {
        property {
            number: 42;
            type_name:  string(STR_CARGO_NAME_FLOUR);
            unit_name:  string(STR_CARGO_NAME_FLOUR);
            type_abbreviation: string(STR_CID_FLOUR);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 14;
            cargo_payment_list_colour: 14;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_COVERED, CC_PIECE_GOODS, CC_POWDERIZED);
            cargo_label: "BAKE";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo:  string(STR_QUANTITY_FLOUR);
            penalty_lowerbound: 4;
            single_penalty_length: 40;
            price_factor: 142;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_flour;
        }
    }

    spriteset(cargoicon_pipe) {
        [10 + 20 * 7, 10 + 20 * 3, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, pipe, 43) {
    property {
        type_name: string(STR_CARGO_NAME_PIPE);
        unit_name: string(STR_CARGO_NAME_PIPE);
        type_abbreviation: string(STR_CID_PIPE);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_PIPE);
        penalty_lowerbound: 30;
        single_penalty_length: 42;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 55;
        station_list_colour: 55;
        price_factor: 180;
        cargo_label: "PIPE";
        number: 43;
    }
    graphics {
        cargoicon_pipe;
    }
}

    spriteset(cargoicon_oysters) { [10 + 20 * 6, 10 + 20 * 3, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, oysters, 44) {
        property {
            number: 44;
            type_name: string(STR_CARGO_NAME_OYSTERS);
            unit_name: string(STR_CARGO_NAME_OYSTERS);
            type_abbreviation: string(STR_CID_OYSTERS);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 148;
            cargo_payment_list_colour: 148;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
            cargo_label: "OYST";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_OYSTERS);
            penalty_lowerbound: 12;
            single_penalty_length: 30;
            price_factor: 143.869400024;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_oysters;
        }
    }

    spriteset(cargoicon_meat) { [10 + 20 * 11, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, meat, 45) {
        property {
            number: 45;
            type_name: string(STR_CARGO_NAME_MEAT);
            unit_name: string(STR_CARGO_NAME_MEAT);
            type_abbreviation: string(STR_CID_MEAT);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 182;
            cargo_payment_list_colour: 182;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
            cargo_label: "MEAT";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_MEAT);
            penalty_lowerbound: 0;
            single_penalty_length: 26;
            price_factor: 119.696617126;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_meat;
        }
    }

    spriteset(cargoicon_cheese) { [10 + 20 * 9, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, cheese, 46) {
        property {
            number: 46;
            type_name: string(STR_CARGO_NAME_CHEESE);
            unit_name: string(STR_CARGO_NAME_CHEESE);
            type_abbreviation: string(STR_CID_CHEESE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0625;
            station_list_colour: 192;
            cargo_payment_list_colour: 192;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
            cargo_label: "CHSE";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 82;
            items_of_cargo: string(STR_CARGO_UNIT_CHEESE);
            penalty_lowerbound: 0;
            single_penalty_length: 20;
            price_factor: 134.579658508;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_cheese;
        }
    }

    spriteset(cargoicon_furniture) { [10 + 20 * 11, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

               
    item(FEAT_CARGOS, furniture, 47) {
        property {
            number: 47;
            type_name: string(STR_CARGO_NAME_FURNITURE);
            unit_name: string(STR_CARGO_NAME_FURNITURE);
            type_abbreviation: string(STR_CID_FURNITURE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 34;
            cargo_payment_list_colour: 34;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
            cargo_label: "FURN";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_FURNITURE);
            penalty_lowerbound: 12;
            single_penalty_length: 255;
            price_factor: 136.233329773;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_furniture;
        }
    }

    spriteset(cargoicon_textile) { [10 + 20 * 9, 10 + 20 * 4, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, textile, 48) {
        property {
            number: 48;
            type_name: string(STR_CARGO_NAME_TEXTILE);
            unit_name: string(STR_CARGO_NAME_TEXTILE);
            type_abbreviation: string(STR_CID_TEXTILE);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.2;
            station_list_colour: 184;
            cargo_payment_list_colour: 184;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
            cargo_label: "TEXT";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_TEXTILE);
            penalty_lowerbound: 8;
            single_penalty_length: 90;
            price_factor: 105.202674866;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_textile;
        }
    }

    spriteset(cargoicon_seed) {  [10 + 20 * 11, 10 + 20 * 0, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, seed, 49) {
        property {
            number: 49;
            type_name: string(STR_CARGO_NAME_SEED);
            unit_name: string(STR_CARGO_NAME_SEED);
            type_abbreviation: string(STR_CID_SEED);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.2;
            station_list_colour: 188;
            cargo_payment_list_colour: 188;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_PIECE_GOODS, CC_COVERED);
            cargo_label: "SEED";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: string(STR_CARGO_UNIT_SEED);
            penalty_lowerbound: 4;
            single_penalty_length: 40;
            price_factor: 110.202674866;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_seed;
        }
    }

    spriteset(cargoicon_fertilizer) { [10 + 20 * 3, 10 + 20 * 3, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, fertilizer, 50) {
        property {
            number: 50;
              type_name: string(STR_CARGO_NAME_FERTILIZER);
              unit_name: string(STR_CARGO_NAME_FERTILIZER);
              type_abbreviation: string(STR_CID_FERTILIZER);
              sprite: NEW_CARGO_SPRITE;
              weight: 1.0;
              station_list_colour: 103;
              cargo_payment_list_colour: 103;
              is_freight: 1;
              cargo_classes: bitmask(CC_PIECE_GOODS, CC_BULK, CC_COVERED);
              cargo_label: "FERT";
              town_growth_effect: TOWNGROWTH_NONE;
              town_growth_multiplier: 1.0;
              units_of_cargo: TTD_STR_TONS;
              items_of_cargo: string(STR_CARGO_UNIT_FERTILIZER);
              penalty_lowerbound: 20;
              single_penalty_length: 36;
              price_factor: 128;
              capacity_multiplier: 1;
        }
        graphics {
            cargoicon_fertilizer;
        }
    }

    spriteset(cargoicon_explosives) {
        [10 + 20 * 2, 10 + 20 * 3, 10, 10, 0, 0, ANIM, "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, explosives, 51) {
    property {
        type_name: string(STR_CARGO_NAME_EXPLOSIVES);
        unit_name: string(STR_CARGO_NAME_EXPLOSIVES);
        type_abbreviation: string(STR_CID_EXPLOSIVES);
        sprite: NEW_CARGO_SPRITE;
        weight: 0.25;
        is_freight: 1;
        cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_HAZARDOUS);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_CRATES;
        items_of_cargo: string(STR_CARGO_UNIT_EXPLOSIVES);
        penalty_lowerbound: 6;
        single_penalty_length: 42;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 166;
        station_list_colour: 166;
        price_factor: 191;
        cargo_label: "BOOM";
        number: 51;
    }
    graphics {
        cargoicon_explosives;
    }
}

    spriteset(cargoicon_acid) {
        [10 + 20 * 4, 10 + 20 * 4, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }
 
item(FEAT_CARGOS, acid, 52) {
    property {
        type_name: string(STR_CARGO_NAME_ACID);
        unit_name: string(STR_CARGO_NAME_ACID);
        type_abbreviation: string(STR_CID_ACID);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.5;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: string(STR_CARGO_UNIT_ACID);
        penalty_lowerbound: 24;
        single_penalty_length: 48;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 183;
        station_list_colour: 183;
        price_factor: 109;
        cargo_label: "ACID";
        number: 52;
    }
    graphics {
        cargoicon_acid;
    }
}

    spriteset(cargoicon_chlorine) {
        [10 + 20 * 2, 10 + 20 * 4, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, chlorine, 53) {
    property {
        type_name: string(STR_CARGO_NAME_CHLORINE);
        unit_name: string(STR_CARGO_NAME_CHLORINE);
        type_abbreviation: string(STR_CID_CHLORINE);
        sprite: NEW_CARGO_SPRITE;
        weight: 2.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: string(STR_CARGO_UNIT_CHLORINE);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 189;
        station_list_colour: 189;
        price_factor: 120;
        cargo_label: "CHLO";
        number: 53;
    }
    graphics {
        cargoicon_chlorine;
    }
}

    spriteset(cargoicon_slag) {
        [10 + 20 * 11, 10 + 20 * 3, 10, 10, 0, 0, ANIM, "gfx/other/cargoicons.png"]
    }
item(FEAT_CARGOS, slag, 54) {
    property {
        type_name: string(STR_CARGO_NAME_SLAG);
        unit_name: string(STR_CARGO_NAME_SLAG);
        type_abbreviation: string(STR_CID_SLAG);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_SLAG);
        penalty_lowerbound: 64;
        single_penalty_length: 255;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 119;
        station_list_colour: 119;
        price_factor: 56;
        cargo_label: "SLAG";
        number: 54;
    }
    graphics {
        cargoicon_slag;
    }
}

    spriteset(cargoicon_tropic_wood) { [10 + 20 * 15, 10 + 20 * 1, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, tropic_wood, 55) {
        property {
            number: 55;
            type_name: string(STR_CARGO_NAME_TROPIC_WOOD);
            unit_name: string(STR_CARGO_NAME_TROPIC_WOOD);
            type_abbreviation: string(STR_CID_TROPIC_WOOD);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 32;
            cargo_payment_list_colour: 32;
            is_freight: 1;
            cargo_classes: bitmask(CC_PIECE_GOODS);
            cargo_label: "TWOD";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: TTD_STR_TONS;
            items_of_cargo: string(STR_CARGO_UNIT_TROPIC_WOOD);
            penalty_lowerbound: 24;
            single_penalty_length: 255;
            price_factor: 97.3963737488;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_tropic_wood;
        }
    }

    spriteset(cargoicon_marine_supplies) { [10 + 20 * 5, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


     item(FEAT_CARGOS, marine_supplies, 56) {
        property {
            number: 56;
            type_name: string(STR_CARGO_NAME_MARINE_SUPPLIES);
            unit_name: string(STR_CARGO_NAME_MARINE_SUPPLIES);
            type_abbreviation: string(STR_CID_MARINE_SUPPLIES);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.5625;
            station_list_colour: 205;
            cargo_payment_list_colour: 205;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS);
            cargo_label: "SESP";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 84;
            items_of_cargo: string(STR_CARGO_UNIT_MARINE);
            penalty_lowerbound: 6;
            single_penalty_length: 36;
            price_factor: 128.11088562;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_marine_supplies;
        }
    }

	spriteset(cargoicon_fuel) { [10 + 20 * 9, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, fuel, 57) {
        property {
            number: 57;
            type_name: string(STR_CARGO_NAME_FUEL);
            unit_name: string(STR_CARGO_NAME_FUEL);
            type_abbreviation: string(STR_CID_FUEL);
            sprite: NEW_CARGO_SPRITE;
            weight: 0.6875;
            station_list_colour: 69;
            cargo_payment_list_colour: 69;
            is_freight: 1;
            cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
            cargo_label: "FUEL";
            town_growth_effect: TOWNGROWTH_GOODS;
            town_growth_multiplier: 1.0;
            units_of_cargo: 82;
            items_of_cargo: string(STR_CARGO_UNIT_FUEL);
            penalty_lowerbound: 18;
            single_penalty_length: 255;
            price_factor: 126.749038696;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_fuel;
        }
    }


spriteset(cargoicon_eltr) { [10 + 20 * 0, 10 + 20 * 6, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

 
item (FEAT_CARGOS, electricity, 58) {
	property {
		number:					58;
		type_name:             			string(STR_NAME_ELECTRICITY);
		unit_name:             			string(STR_NAME_ELECTRICITY);
		units_of_cargo:      			string(STR_SHORT_KWH);
		items_of_cargo:   			string(STR_UNITS_ELECTRICITY);
		type_abbreviation:			string(STR_TINY_ELECTRICITY);
		sprite:					NEW_CARGO_SPRITE;
		weight:					0.001;
		is_freight:				1;
		price_factor:				15;
		station_list_colour:			175;
		cargo_payment_list_colour:		175;
		cargo_classes:				bitmask(CC_SPECIAL);
		cargo_label:				"ELTR";
		town_growth_effect:			TOWNGROWTH_GOODS;
		town_growth_multiplier:			1.0;		
	}
	graphics {
            cargoicon_eltr;
        }
    }


    spriteset(cargoicon_water) { [10 + 20 * 1, 10 + 20 * 5, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }


    item(FEAT_CARGOS, water, 59) {
        property {
            number: 59;
            type_name: string(STR_CARGO_NAME_WATER);
            unit_name: string(STR_CARGO_NAME_WATER);
            type_abbreviation: string(STR_CID_WATER);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0625;
            station_list_colour: 149;
            cargo_payment_list_colour: 149;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_LIQUID);
            cargo_label: "WATR";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 82;
            items_of_cargo: string(STR_CARGO_UNIT_WATER);
            penalty_lowerbound: 0;
            single_penalty_length: 20;
            price_factor: 134.579658508;
            capacity_multiplier: 1;
        }
        graphics {
            cargoicon_water;
        }
    }

    spriteset(cargoicon_potatos) { [10 + 20 * 6, 10 + 20 * 2, 10, 10, 0, 0, "gfx/other/cargoicons.png"] }

    item(FEAT_CARGOS, potatos, 60) {
        property {
            number: 60;
            type_name: string(STR_CARGO_NAME_POTATO);
            unit_name: string(STR_CARGO_NAME_POTATO);
            type_abbreviation: string(STR_CID_POTATO);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 103;
            cargo_payment_list_colour: 103;
            is_freight: 1;
            cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
            cargo_label: "TATO";
            town_growth_effect: TOWNGROWTH_FOOD;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_POTATO);
            penalty_lowerbound: 0;
            single_penalty_length: 26;
            price_factor: 119.696617126;
            capacity_multiplier: 1;

        }
        graphics {
            cargoicon_potatos;
        }
    }

    spriteset(cargoicon_electrical_parts) {
        [10 + 20 * 5, 10 + 20 * 4, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, electrical_parts, 61) {
    property {
        type_name: string(STR_CARGO_NAME_ELECTRICAL_PARTS);
        unit_name: string(STR_CARGO_NAME_ELECTRICAL_PARTS);
        type_abbreviation: string(STR_CID_ELECTRICAL_PARTS);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_ELECTRICAL_PARTS);
        penalty_lowerbound: 7;
        single_penalty_length: 255;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 116;
        station_list_colour: 116;
        price_factor: 171;
        cargo_label: "POWR";
        number: 61;
    }
    graphics {
        cargoicon_electrical_parts;
    }
}

    spriteset(cargoicon_machine_parts) {
        [10 + 20 * 14, 10 + 20 * 2, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, machine_parts, 62) {
    property {
        type_name: string(STR_CARGO_NAME_MACHINE_PARTS);
        unit_name: string(STR_CARGO_NAME_MACHINE_PARTS);
        type_abbreviation: string(STR_CID_MACHINE_PARTS);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.0;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_CARGO_UNIT_MACHINE_PARTS);
        penalty_lowerbound: 7;
        single_penalty_length: 255;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 24;
        station_list_colour: 24;
        price_factor: 171;
        cargo_label: "MPTS";
        number: 62;
    }
    graphics {
        cargoicon_machine_parts;
    }
}

    spriteset(cargoicon_sewage) {
        [10 + 20 * 14, 10 + 20 * 4, 10, 10, 0, 0,  "gfx/other/cargoicons.png"]
    }

item(FEAT_CARGOS, sewage, 63) {
    property {
        type_name: string(STR_CARGO_NAME_SEWAGE);
        unit_name: string(STR_CARGO_NAME_SEWAGE);
        type_abbreviation: string(STR_CID_SEWAGE);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.2;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID);
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 1.0;
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: string(STR_CARGO_UNIT_SEWAGE);
        penalty_lowerbound: 20;
        single_penalty_length: 255;
        capacity_multiplier: 1;
        cargo_payment_list_colour: 61;
        station_list_colour: 61;
        price_factor: 120;
        cargo_label: "RFPR";
        number: 63;
    }
    graphics {
        cargoicon_sewage;
    }
}


/*
 * Normal building sprite of 64px width and arbitrary width
 * and normal alignment to the edges of the tile
 */

switch (FEAT_INDUSTRYTILES, SELF, switch_tile_fences_neighbouring_station, [
            STORE_TEMP(LOAD_TEMP(9) * (nearby_tile_class(-1,  0) != TILE_CLASS_STATION), 9),
            STORE_TEMP(LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10),
            STORE_TEMP(LOAD_TEMP(11) * (nearby_tile_class( 0,  1) != TILE_CLASS_STATION), 11),
            STORE_TEMP(LOAD_TEMP(12) * (nearby_tile_class( 1,  0) != TILE_CLASS_STATION), 12),
        ]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_tile_fences_neighbouring_industry, [
            STORE_TEMP(LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1,  0), 9),
            STORE_TEMP(LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10),
            STORE_TEMP(LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0,  1), 11),
            STORE_TEMP(LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1,  0), 12),
        ]) {
    switch_tile_fences_neighbouring_station;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_tile_fences, [
            STORE_TEMP(0, 1),
            STORE_TEMP(0, 2),
            STORE_TEMP(0, 3),
            STORE_TEMP(0, 4),
            STORE_TEMP(1, 9),
            STORE_TEMP(1, 10),
            STORE_TEMP(1, 11),
            STORE_TEMP(1, 12),
            STORE_TEMP(0, 5),
            STORE_TEMP(0, 6),
            STORE_TEMP(0, 7),
            STORE_TEMP(0, 8),
            ]) {
    switch_tile_fences_neighbouring_industry;
}switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_normal, [STORE_TEMP(GROUNDSPRITE_NORMAL, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_arctic_full_snow, [STORE_TEMP(GROUNDSPRITE_SNOW_4_4, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_arctic_three_quarter_snow, [STORE_TEMP(GROUNDSPRITE_SNOW_3_4, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_arctic_half_snow, [STORE_TEMP(GROUNDSPRITE_SNOW_2_4, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_arctic_quarter_snow, [STORE_TEMP(GROUNDSPRITE_SNOW_1_4, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_arctic, [nearby_tile_height(0, 0) - snowline_height]) {
    2..255: switch_terrain_sprite_arctic_full_snow;
    1: switch_terrain_sprite_arctic_three_quarter_snow;
    0: switch_terrain_sprite_arctic_half_snow;
    -1: switch_terrain_sprite_arctic_quarter_snow;
    switch_terrain_sprite_normal;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_tropic_full_desert, [STORE_TEMP(GROUNDSPRITE_DESERT, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_tropic_half_desert, [STORE_TEMP(GROUNDSPRITE_DESERT_1_2, 0)]) {
    return 1;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_tropic_desert,
                                                        [(nearby_tile_terrain_type(1, 0) != TILETYPE_DESERT)
                                                         || (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT)
                                                         || (nearby_tile_terrain_type(0, 1) != TILETYPE_DESERT)
                                                         || (nearby_tile_terrain_type(0, -1) != TILETYPE_DESERT)]) {
    1: switch_terrain_sprite_tropic_half_desert;
    switch_terrain_sprite_tropic_full_desert;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite_tropic, nearby_tile_terrain_type(0, 0)) {
    TILETYPE_DESERT: switch_terrain_sprite_tropic_desert;
    switch_terrain_sprite_normal;
}
switch (FEAT_INDUSTRYTILES, SELF, switch_terrain_sprite, climate) {
    CLIMATE_ARCTIC: switch_terrain_sprite_arctic;
    CLIMATE_TROPIC: switch_terrain_sprite_tropic;
    switch_terrain_sprite_normal; 
}random_switch(FEAT_INDUSTRIES, SELF, randomise_primary_production_on_build) {
	1: return 8;
	1: return 12;
	4: return 16;
	3: return 20;
	2: return 24;
	1: return 28;
	1: return 32;
	1: return 36;
}template tmpl_building_sprite(x, y, h, dy) {
    [x, y, 64, h, -31, dy, ANIM]
}
template tmpl_building_sprite_filename(x, y, h, dy, filename) {
    [x, y, 64, h, -31, dy, ANIM | NOCROP, filename]
}/* *******************************************************
 * Construction states shared by many (not all) industries
 * *******************************************************/
spriteset(spriteset_default_construction_states) {
	tmpl_building_sprite_filename(10, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(80, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(150, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(220, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(290, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(360, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(430, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(500, 10, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(10, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(80, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(150, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(220, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(290, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(360, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(430, 100, 64, -33, "gfx/other/default_construction_states.png")
	tmpl_building_sprite_filename(500, 100, 64, -33, "gfx/other/default_construction_states.png")
}
spritelayout spritelayout_default_construction_states {
	ground {
		sprite: spriteset_default_construction_states(random_bits % 16);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}
/* *******************************************************
 * Construction states WATER
 * *******************************************************/

spriteset(spriteset_default_construction_states_WATER) {
	tmpl_building_sprite_filename(10, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(80, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(150, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(220, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(290, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(360, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(430, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(500, 10, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(10, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(80, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(150, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(220, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(290, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(360, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(430, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
	tmpl_building_sprite_filename(500, 100, 64, -33, "gfx/other/default_construction_states_WATER.png")
}
spritelayout spritelayout_default_construction_states_WATER {
	ground {
		sprite: spriteset_default_construction_states_WATER(random_bits % 16);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}
template tmpl_ground_tile(x, y) {
	[x, y, 64, 31, -31, 0, ANIM]
}
        spriteset(spriteset_ground_tile_mud_1, "gfx/other/ground_tiles.png") {
                tmpl_ground_tile(0, 10)
        }


/*****************************************
START  INDUSTRIES
******************************************/

/* ******************************************************************
 *                              Shopping_Centres
 * ******************************************************************/
            spriteset(Shopping_Centres_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Shopping_Centres.png"]
            }
            spriteset(Shopping_Centres_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Shopping_Centres_SNOW.png"]
            }
    spritelayout Shopping_Centres_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Shopping_Centres_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Shopping_Centres_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Shopping_Centres_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Shopping_Centres_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Shopping_Centres_industry_graphics_switch_layouts, layout_num) {
        1: Shopping_Centres_industry_layout_graphics_switch;
    Shopping_Centres_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Shopping_Centres_industry_construction_state_graphics_switch, construction_state) {
  0..2: spritelayout_default_construction_states;
    Shopping_Centres_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Shopping_Centres_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Shopping_Centres_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Shopping_Centres_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Shopping_Centres_store_temp_vars;
}

    switch (FEAT_INDUSTRYTILES, SELF, Shopping_Centres_tile_1_lc_1,
                                                      (
                                                      nearby_tile_class(0, -1) == TILE_CLASS_ROAD ? 1 :
                                                      (nearby_tile_class(0, 1) == TILE_CLASS_ROAD ? 1 :
                                                      (nearby_tile_class(-1, 0) == TILE_CLASS_ROAD ? 1 :
                                                      (nearby_tile_class(1, 0) == TILE_CLASS_ROAD ? 1 : 0
                                                      ))))) {
        1: return CB_RESULT_LOCATION_ALLOW;
        return CB_RESULT_LOCATION_DISALLOW;
    }


    switch (FEAT_INDUSTRYTILES, PARENT, Shopping_Centres_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Shopping_Centres_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Shopping_Centres_tile_1, 101) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Shopping_Centres_tile_1_lc_0;
            Shopping_Centres_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Shopping_Centres_industry_layout_tilelayout {
            0, 0: Shopping_Centres_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Shopping_Centres_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Shopping_Centres, 01) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 191;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Shopping_Centres_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_Shopping_Centres);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("BEER"),accept_cargo("BDMT"),accept_cargo("CHSE"),accept_cargo("BAKE"),accept_cargo("FURN"),accept_cargo("GOOD"),accept_cargo("MAIL"),accept_cargo("MEAT"),accept_cargo("OYST"),accept_cargo("PASS"),accept_cargo("PCL_"),accept_cargo("PETR"),accept_cargo("TEXT"),accept_cargo("OTI2"),accept_cargo("VALU"),accept_cargo("VEHI"),produce_cargo("FOOD",8),produce_cargo("MAIL",4),produce_cargo("PASS",18),produce_cargo("PCL_",4),produce_cargo("OTI2",4),produce_cargo("VALU",4),produce_cargo("SCMT",8)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_SHOPPING_CENTRES));
                }
            }
        

            item(FEAT_INDUSTRIES, Shopping_Centres, 01) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_Shopping_Centres);
                    cargo_subtype_display:    Shopping_Centres_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Shopping_Centres
******************************************************/


/* ******************************************************************
 *                              Manufacturing_Ind
 * ******************************************************************/
            spriteset(Manufacturing_Ind_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Manufacturing_Ind.png"]
            }
            spriteset(Manufacturing_Ind_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Manufacturing_Ind_SNOW.png"]
            }
    spritelayout Manufacturing_Ind_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Manufacturing_Ind_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Manufacturing_Ind_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Manufacturing_Ind_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Manufacturing_Ind_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Manufacturing_Ind_industry_graphics_switch_layouts, layout_num) {
        1: Manufacturing_Ind_industry_layout_graphics_switch;
    Manufacturing_Ind_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Manufacturing_Ind_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states;
    Manufacturing_Ind_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Manufacturing_Ind_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Manufacturing_Ind_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Manufacturing_Ind_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Manufacturing_Ind_store_temp_vars;
}
    switch(FEAT_INDUSTRYTILES, SELF, Manufacturing_Ind_tile_1_lc_1,
        (nearby_tile_class( 1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0,  1) == TILE_CLASS_INDUSTRY)) {
        1: return CB_RESULT_LOCATION_DISALLOW;
        return CB_RESULT_LOCATION_ALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Manufacturing_Ind_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Manufacturing_Ind_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Manufacturing_Ind_tile_1, 102) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Manufacturing_Ind_tile_1_lc_0;
            Manufacturing_Ind_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Manufacturing_Ind_industry_layout_tilelayout {
            0, 0: Manufacturing_Ind_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Manufacturing_Ind_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Manufacturing_Ind, 02) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 186;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Manufacturing_Ind_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_Manufacturing_Ind);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("CMNT"),accept_cargo("COPR"),accept_cargo("FICR"),accept_cargo("FRUT"),accept_cargo("GLAS"),accept_cargo("GRAI"),accept_cargo("FISH"),accept_cargo("LVST"),accept_cargo("MILK"),accept_cargo("PAPR"),accept_cargo("TATO"),accept_cargo("STEL"),accept_cargo("WDPR"),accept_cargo("FRVG"),accept_cargo("WOOL"),accept_cargo("OTI1"),produce_cargo("MAIZ",12),produce_cargo("BEER",8),produce_cargo("BDMT",12),produce_cargo("VEHI",8),produce_cargo("POWR",8),produce_cargo("BAKE",12),produce_cargo("CHSE",8),produce_cargo("FURN",8),produce_cargo("GOOD",8),produce_cargo("MPTS",8),produce_cargo("MEAT",4),produce_cargo("SESP",12),produce_cargo("SEED",8),produce_cargo("TEXT",8),produce_cargo("SCMT",12),produce_cargo("OTI1",4)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_MANUFACTURING_IND));
                }
            }
        

            item(FEAT_INDUSTRIES, Manufacturing_Ind, 02) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_Manufacturing_Ind);
                    cargo_subtype_display:    Manufacturing_Ind_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Manufacturing_Ind
******************************************************/

/* ******************************************************************
 *                              Heavy_Ind
 * ******************************************************************/
            spriteset(Heavy_Ind_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Heavy_Ind.png"]
            }
            spriteset(Heavy_Ind_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Heavy_Ind_SNOW.png"]
            }
    spritelayout Heavy_Ind_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Heavy_Ind_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Heavy_Ind_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Heavy_Ind_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Heavy_Ind_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Heavy_Ind_industry_graphics_switch_layouts, layout_num) {
        1: Heavy_Ind_industry_layout_graphics_switch;
    Heavy_Ind_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Heavy_Ind_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states;
    Heavy_Ind_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Heavy_Ind_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Heavy_Ind_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Heavy_Ind_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Heavy_Ind_store_temp_vars;
}
    switch(FEAT_INDUSTRYTILES, SELF, Heavy_Ind_tile_1_lc_1,
        (nearby_tile_class( 1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0,  1) == TILE_CLASS_INDUSTRY)) {
        1: return CB_RESULT_LOCATION_DISALLOW;
        return CB_RESULT_LOCATION_ALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Heavy_Ind_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Heavy_Ind_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Heavy_Ind_tile_1, 103) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Heavy_Ind_tile_1_lc_0;
            Heavy_Ind_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Heavy_Ind_industry_layout_tilelayout {
            0, 0: Heavy_Ind_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Heavy_Ind_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Heavy_Ind, 03) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 184;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Heavy_Ind_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_Heavy_Ind);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("AORE"),accept_cargo("CLAY"),accept_cargo("COAL"),accept_cargo("CORE"),accept_cargo("GRVL"),accept_cargo("IORE"),accept_cargo("LIME"),accept_cargo("MPTS"),accept_cargo("NKOR"),accept_cargo("OIL_"),accept_cargo("RUBR"),accept_cargo("SAND"),accept_cargo("SULP"),accept_cargo("TWOD"),accept_cargo("WOOD"),accept_cargo("OTI1"),produce_cargo("ACID",8),produce_cargo("CMNT",8),produce_cargo("CHLO",8),produce_cargo("COPR",8),produce_cargo("BOOM",8),produce_cargo("FERT",8),produce_cargo("GLAS",8),produce_cargo("PAPR",8),produce_cargo("PETR",12),produce_cargo("PIPE",12),produce_cargo("SLAG",8),produce_cargo("STEL",12),produce_cargo("WDPR",12),produce_cargo("SCMT",12),produce_cargo("OTI1",8)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_HEAVY_IND));
                }
            }
        

            item(FEAT_INDUSTRIES, Heavy_Ind, 03) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_Heavy_Ind);
                    cargo_subtype_display:    Heavy_Ind_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Heavy_Ind
******************************************************/


/* ******************************************************************
 *                              Residential
 * ******************************************************************/
            spriteset(Residential_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Residential.png"]
            }
            spriteset(Residential_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Residential_SNOW.png"]
            }
    spritelayout Residential_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Residential_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Residential_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Residential_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Residential_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Residential_industry_graphics_switch_layouts, layout_num) {
        1: Residential_industry_layout_graphics_switch;
    Residential_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Residential_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states;
    Residential_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Residential_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Residential_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Residential_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Residential_store_temp_vars;
}
    switch (FEAT_INDUSTRYTILES, SELF, Residential_tile_1_lc_1,
                                                      (
                                                      nearby_tile_class(0, -1) == TILE_CLASS_ROAD ? 1 :
                                                      (nearby_tile_class(0, 1) == TILE_CLASS_ROAD ? 1 :
                                                      (nearby_tile_class(-1, 0) == TILE_CLASS_ROAD ? 1 :
                                                      (nearby_tile_class(1, 0) == TILE_CLASS_ROAD ? 1 : 0
                                                      ))))) {
        1: return CB_RESULT_LOCATION_ALLOW;
        return CB_RESULT_LOCATION_DISALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Residential_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Residential_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Residential_tile_1, 104) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Residential_tile_1_lc_0;
            Residential_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Residential_industry_layout_tilelayout {
            0, 0: Residential_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Residential_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Residential, 04) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 174;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Residential_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_RESIDENTIAL);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("FOOD"),accept_cargo("ELTR"),accept_cargo("FUEL"), accept_cargo("MAIL"),accept_cargo("PASS"),accept_cargo("PCL_"),accept_cargo("OTI2"),accept_cargo("WATR"),accept_cargo("OTI1"),produce_cargo("MAIL",4),produce_cargo("PASS",18),produce_cargo("PCL_",4),produce_cargo("RFPR",8),produce_cargo("OTI2",10),produce_cargo("SCMT",8),produce_cargo("OTI1",16)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_RESIDENTIAL));
                }
            }
        

            item(FEAT_INDUSTRIES, Residential, 04) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_RESIDENTIAL);
                    cargo_subtype_display:    Residential_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Residential
******************************************************/


/* ******************************************************************
 *                              Mines_and_Quarries
 * ******************************************************************/
            spriteset(Mines_and_Quarries_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Mines_and_Quarries.png"]
            }
            spriteset(Mines_and_Quarries_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Mines_and_Quarries_SNOW.png"]
            }
    spritelayout Mines_and_Quarries_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Mines_and_Quarries_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Mines_and_Quarries_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Mines_and_Quarries_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Mines_and_Quarries_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Mines_and_Quarries_industry_graphics_switch_layouts, layout_num) {
        1: Mines_and_Quarries_industry_layout_graphics_switch;
    Mines_and_Quarries_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Mines_and_Quarries_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states;
    Mines_and_Quarries_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Mines_and_Quarries_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Mines_and_Quarries_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Mines_and_Quarries_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Mines_and_Quarries_store_temp_vars;
}
    switch(FEAT_INDUSTRYTILES, SELF, Mines_and_Quarries_tile_1_lc_1,
        (nearby_tile_class( 1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0,  1) == TILE_CLASS_INDUSTRY)) {
        1: return CB_RESULT_LOCATION_DISALLOW;
        return CB_RESULT_LOCATION_ALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Mines_and_Quarries_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Mines_and_Quarries_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Mines_and_Quarries_tile_1, 105) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Mines_and_Quarries_tile_1_lc_0;
            Mines_and_Quarries_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Mines_and_Quarries_industry_layout_tilelayout {
            0, 0: Mines_and_Quarries_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Mines_and_Quarries_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Mines_and_Quarries, 05) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 123;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Mines_and_Quarries_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_Mines_and_Quarries);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("ACID"),accept_cargo("BDMT"),accept_cargo("POWR"),accept_cargo("BOOM"),accept_cargo("MPTS"),accept_cargo("PIPE"),accept_cargo("OTI1"),produce_cargo("AORE",12),produce_cargo("CLAY",12),produce_cargo("COAL",16),produce_cargo("CORE",12),produce_cargo("GRVL",12),produce_cargo("IORE",8),produce_cargo("LIME",8),produce_cargo("FUEL",12),produce_cargo("NKOR",12),produce_cargo("OIL_",16),produce_cargo("SAND",12),produce_cargo("SULP",8),produce_cargo("URAN",8),produce_cargo("SCMT",8),produce_cargo("OTI1",8)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_MINES_AND_QUARRIES));
                }
            }
        

            item(FEAT_INDUSTRIES, Mines_and_Quarries, 05) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_Mines_and_Quarries);
                    cargo_subtype_display:    Mines_and_Quarries_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Land_Based_Primary
******************************************************/

/* ******************************************************************
 *                              Farms
 * ******************************************************************/
            spriteset(Farms_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/farms.png"]
            }
            spriteset(Farms_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/farms_SNOW.png"]
            }
    spritelayout Farms_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Farms_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Farms_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Farms_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Farms_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Farms_industry_graphics_switch_layouts, layout_num) {
        1: Farms_industry_layout_graphics_switch;
    Farms_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Farms_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states;
    Farms_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Farms_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Farms_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Farms_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Farms_store_temp_vars;
}
    switch(FEAT_INDUSTRYTILES, SELF, Farms_tile_1_lc_1,
        (nearby_tile_class( 1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0,  1) == TILE_CLASS_INDUSTRY)) {
        1: return CB_RESULT_LOCATION_DISALLOW;
        return CB_RESULT_LOCATION_ALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Farms_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Farms_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Farms_tile_1, 106) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Farms_tile_1_lc_0;
            Farms_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Farms_industry_layout_tilelayout {
            0, 0: Farms_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Farms_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Farms, 06) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 81;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Farms_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_FARMS);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("MAIZ"),accept_cargo("BDMT"),accept_cargo("POWR"),accept_cargo("FERT"),accept_cargo("MPTS"),accept_cargo("SEED"),accept_cargo("OTI1"),produce_cargo("CHSE",16),produce_cargo("FRUT",20),produce_cargo("GRAI",20),produce_cargo("LVST",16),produce_cargo("MILK",16),produce_cargo("TATO",16),produce_cargo("RUBR",8),produce_cargo("FICR",20),produce_cargo("TWOD",4),produce_cargo("FRVG",20),produce_cargo("SCMT",4),produce_cargo("WOOD",8),produce_cargo("WOOL",16),produce_cargo("OTI1",4)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_FARMS));

                }
            }
        

            item(FEAT_INDUSTRIES, Farms, 06) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_FARMS);
                    cargo_subtype_display:    Farms_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Farms
******************************************************/


/* ******************************************************************
 *                              Utility_Comp
 * ******************************************************************/
            spriteset(Utility_Comp_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Utility_Comp.png"]
            }
            spriteset(Utility_Comp_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Utility_Comp_SNOW.png"]
            }
    spritelayout Utility_Comp_spritelayout {
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_NORMAL;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                building {
                    sprite: Utility_Comp_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Utility_Comp_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Utility_Comp_industry_layout_graphics_switch, relative_pos) {
                relative_coord(0, 0): Utility_Comp_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Utility_Comp_industry_graphics_switch_layouts, layout_num) {
        1: Utility_Comp_industry_layout_graphics_switch;
    Utility_Comp_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Utility_Comp_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states;
    Utility_Comp_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Utility_Comp_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Utility_Comp_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Utility_Comp_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Utility_Comp_store_temp_vars;
}
    switch(FEAT_INDUSTRYTILES, SELF, Utility_Comp_tile_1_lc_1,
        (nearby_tile_class( 1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0,  1) == TILE_CLASS_INDUSTRY)) {
        1: return CB_RESULT_LOCATION_DISALLOW;
        return CB_RESULT_LOCATION_ALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Utility_Comp_tile_1_lc_0, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Utility_Comp_tile_1_lc_1;
    }

    item(FEAT_INDUSTRYTILES, Utility_Comp_tile_1, 107) {
        property {
            substitute:         0;
            land_shape_flags:    bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		    tile_check: Utility_Comp_tile_1_lc_0;
            Utility_Comp_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/
    tilelayout Utility_Comp_industry_layout_tilelayout {
            0, 0: Utility_Comp_tile_1;
    }
switch (FEAT_INDUSTRIES, SELF, Utility_Comp_cargo_subtype_display, 1) {
    return 0x3800 + string(STR_EMPTY);
}


            item(FEAT_INDUSTRIES, Utility_Comp, 07) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 19;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Utility_Comp_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_Utility_Comp);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("BDMT"),accept_cargo("COAL"),accept_cargo("COPR"),accept_cargo("CHLO"),accept_cargo("POWR"),accept_cargo("MPTS"),accept_cargo("PIPE"),accept_cargo("STEL"),accept_cargo("OIL_"),accept_cargo("FUEL"),accept_cargo("RFPR"),accept_cargo("SLAG"),accept_cargo("WDPR"),accept_cargo("URAN"),accept_cargo("SCMT"),accept_cargo("OTI1"),produce_cargo("ELTR",32),produce_cargo("WATR",4),produce_cargo("OTI1",4)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_UTILITY_COMP));


                }
            }
        

            item(FEAT_INDUSTRIES, Utility_Comp, 07) {
                graphics {
 
                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_Utility_Comp);
                    cargo_subtype_display:    Utility_Comp_cargo_subtype_display;

                }
            }

/*****************************************************
        END   Utility_Comp
******************************************************/

/* ******************************************************************
 *                              Fishery_Offshore
 * ******************************************************************/
            spriteset(Fishing_Offshore_spriteset_2_0) {
                        [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Fishing_Offshore.png"]
            }
            spriteset(Fishing_Offshore_spriteset_2_0_snow) {
                            [0, 0, 64, 64, -31, -33, ANIM | NOCROP, "gfx/Fishing_Offshore.png"]
            }
    spritelayout Fishing_Offshore_spritelayout {
                  
			childsprite {
                        sprite: GROUNDSPRITE_WATER;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (LOAD_TEMP(13));
                        always_draw: 1;
                    }
                    childsprite {
                        sprite: GROUNDSPRITE_WATER;
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }

                building {
                    sprite: Fishing_Offshore_spriteset_2_0(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(255));
                }
                building {
                    sprite: Fishing_Offshore_spriteset_2_0_snow(0);
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: 0;
                    yoffset: 0;
                    zoffset: 0;
                    xextent: 16;
                    yextent: 16;
                    zextent: 16;
                    always_draw: 0;
                    hide_sprite: (LOAD_TEMP(245));
                }
    }
    switch(FEAT_INDUSTRYTILES, SELF, Fishing_Offshore_industry_layout_graphics_switch, relative_pos) {
                relative_coord(2, 2): Fishing_Offshore_spritelayout;
        return 0; // a default is needed, but should never be reached, layout definitions are explicit
    }
switch(FEAT_INDUSTRYTILES, PARENT, Fishing_Offshore_industry_graphics_switch_layouts, layout_num) {
        1: Fishing_Offshore_industry_layout_graphics_switch;
    Fishing_Offshore_industry_layout_graphics_switch; // default
}
switch(FEAT_INDUSTRYTILES, SELF, Fishing_Offshore_industry_construction_state_graphics_switch, construction_state) {
    0..2: spritelayout_default_construction_states_WATER;
    Fishing_Offshore_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, SELF, Fishing_Offshore_store_temp_vars,
        [STORE_TEMP(random_bits, 14),
         STORE_TEMP(terrain_type == TILETYPE_SNOW, 13)
                , STORE_TEMP(0,
                             255) 
                , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(255),
                             255)
                , STORE_TEMP(LOAD_TEMP(13) == 0 ? 1 : LOAD_TEMP(255), 
                             245) 
                , STORE_TEMP(LOAD_TEMP(13) == 1 ? 1 : LOAD_TEMP(255), 
                             255)
        ]) {
    Fishing_Offshore_industry_construction_state_graphics_switch; // default
}
switch (FEAT_INDUSTRYTILES, SELF, Fishing_Offshore_switch_graphics, [switch_tile_fences(), switch_terrain_sprite()]) {
    Fishing_Offshore_store_temp_vars;
}


    switch(FEAT_INDUSTRYTILES, SELF, Fishing_Offshore_tile_1_lc_2,
        (nearby_tile_class( 1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  0) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class(-1,  1) == TILE_CLASS_INDUSTRY) |
        (nearby_tile_class( 0,  1) == TILE_CLASS_INDUSTRY)) {
        1: return CB_RESULT_LOCATION_DISALLOW;
        return CB_RESULT_LOCATION_ALLOW;
    }

    switch (FEAT_INDUSTRYTILES, PARENT, Fishing_Offshore_tile_1_lc_1, (
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) ||
                (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        Fishing_Offshore_tile_1_lc_2;
    }
    switch (FEAT_INDUSTRYTILES, SELF, Fishing_Offshore_tile_1_lc_0, nearby_tile_slope(0,0) == SLOPE_FLAT) {
        1: Fishing_Offshore_tile_1_lc_1;
        return CB_RESULT_LOCATION_DISALLOW;
    }




    item(FEAT_INDUSTRYTILES, Fishing_Offshore_tile_1, 108) {
        property {
            substitute:         0;
            land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            animation_triggers: bitmask();
        }
        graphics {
    		tile_check: Fishing_Offshore_tile_1_lc_0;
		foundations: return CB_RESULT_NO_FOUNDATIONS;
        	Fishing_Offshore_switch_graphics;
        }
    }
/* *************************************************
 * Definition of the industry
 * *************************************************/

    tilelayout Fishing_Offshore_industry_layout_tilelayout {
            0, 0: 255;
            0, 1: 255;
            0, 2: 255;
            0, 3: 255;
            0, 4: 255;
            0, 5: 255;
            0, 6: 255;
            1, 0: 255;
            1, 6: 255;
            2, 0: 255;
	    2, 2: Fishing_Offshore_tile_1;
            2, 3: 24;
            2, 4: 24; 
            2, 6: 255;
            3, 0: 255;
            3, 6: 255;
            4, 0: 255;
            4, 6: 255;
    }


            item(FEAT_INDUSTRIES, Fishing_Offshore, 08) {
                property {
                    substitute: 0;
                    override: 0;
                    map_colour: 151;
                    life_type: IND_LIFE_TYPE_BLACK_HOLE;
                    min_cargo_distr: 1;
                    layouts: [Fishing_Offshore_industry_layout_tilelayout];
                    spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS, IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
                    conflicting_ind_types: [];
                    random_sound_effects: [];
                    name: string(STR_IND_Fishing_Offshore);
                    prob_map_gen: 0;
                    prob_in_game: 0;
                    prospect_chance: 0.75;
                    fund_cost_multiplier: 1;
                    remove_cost_multiplier: 0;
                    remove_cost_multiplier: 0;
                    cargo_types: [accept_cargo("BDMT"),accept_cargo("POWR"),accept_cargo("SESP"),accept_cargo("MPTS"),accept_cargo("PIPE"),accept_cargo("OTI1"),produce_cargo("FISH",20),produce_cargo("FUEL",12),produce_cargo("SAND",12),produce_cargo("OIL_",20),produce_cargo("OYST",4),produce_cargo("SCMT",4),produce_cargo("OTI1",4)];
                    nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_STATION_FISHING_OFFSHORE));

                }
            }
        

            item(FEAT_INDUSTRIES, Fishing_Offshore, 08) {
                graphics {

                    build_prod_change:        randomise_primary_production_on_build;
                    extra_text_industry:      return string(STR_EXTRA_Fishing_Offshore);

                }
            }

/*****************************************************
        END   Fishing_Offshore
******************************************************/