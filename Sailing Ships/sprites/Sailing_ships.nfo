// Automatically generated by GRFCODEC. Do not modify!
// (Info version 6)
// Format: spritenum pcxfile xpos ypos compression ysize xsize xrel yrel

// Initial line

	0 * 4	BC 01 00 00 

// Action 8

	1 * 61	08 
		00 									//OTTD 1.2
		4a 4d 01 01 								//JM set 1, grf 1		
		53 61 69 6C 69 6E 67 20 53 68 69 70 73 00 				//Sailing Ships
		53 61 69 6c 20 70 6f 77 65 72 65 64 20 73 68 69 70 73 20 62 79 20 4a 20 4d 69 74 63 68 65 6c 6c 20 28 63 29 32 30 31 32 00 
											//Sail powered ships by J Mitchell (c)2012

//Add sound files
	2 * 3	11 01 00
   	3 ** E:\sprites\sounds\shipsbell.wav

// Action 4 Change names

	4 * 146	04 02 7F 								//Action 4 ships, default language 
		08 0B 									//Change 7 names starting at 0B
		20 20 20 20 20 20 20 20 43 6C 69 70 70 65 72 00 			//Clipper 0B
		20 20 20 20 20 20 20 20 50 61 64 64 6c 65 20 53 74 65 61 6d 65 72 00 	//Paddle Steamer 0C
		20 20 20 20 20 20 20 20 4d 65 72 63 68 61 6e 74 6d 61 6e 00		//merchantman 0D
		20 20 20 20 20 20 20 20 42 61 72 71 75 65 00				//Barque 0E
		20 20 20 20 20 20 20 20 53 63 68 6f 6f 6e 65 72 00			//Schooner 0F
		20 20 20 20 20 20 20 20 42 72 69 67 00					//Brig 10
		20 20 20 20 20 20 20 20 53 74 65 61 6d 73 68 69 70 00			//Steamship 11
		20 20 20 20 20 20 20 20 57 69 6e 64 6a 61 6d 6d 65 72 00			//Windjammer 12

//Clipper

	// Action 0 Properties
	5 * 48	00 02 		//Action 0 for ships
		11 01 0B 	//Change 17 properties of one ship, ID 0D (clipper)
		03 14 		//Life
		06 07		//All climates xpt tl
		04 32 		//Model life
		07 1e		//Load speed
		09 01 		//Refittable
		0A 96 		//Cost factor
		0B 33 		//Speed
		0c 05 		//Cargo type = Goods
		0d aa 00 	//Capacity
		0f 65 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 FF 00	// refittable all
		19 00 00	//non refittable
		08 FF		//New GFX
		1A 51 26 0A 00 	//Intro date

	// buy menu sprites
	
 	6 * 4    01 02 01 08 // menu sprites
	
	7 * 1    00
 	8 * 1    00
 	9 * 1    00
 	10 * 1    00
 	11 * 1    00
 	12 * 1   00
 	13 E:\sprites\Clipper\2.PCX 552 87 09 15 88 -150 -10
 	14 * 1    00

 	15 * 9	02 02 00 // buy menu action 2 ID 00
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	16* 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	17 E:\sprites\Clipper\1.PCX 5 5 09 99 36 -18 -60
	18 E:\sprites\Clipper\1.PCX 50 5 09 87 89 -58 -50
	19 E:\sprites\Clipper\1.PCX 150 5 09 74 115 -50 -60
	20 E:\sprites\Clipper\1.PCX 275 5 09 86 93 -20 -45
	21 E:\sprites\Clipper\1.PCX 375 5 09 99 38 -20 -63
	22 E:\sprites\Clipper\1.PCX 425 5 09 86 93 -70 -43
	23 E:\sprites\Clipper\1.PCX 525 5 09 74 115 -60 -60
	24 E:\sprites\Clipper\1.PCX 650 5 09 87 90 -35 -50 
	//still empty
	25 E:\sprites\Clipper\2.PCX 5 5 09 99 36 -18 -61
	26 E:\sprites\Clipper\2.PCX 50 5 09 87 89 -58 -50
	27 E:\sprites\Clipper\2.PCX 150 5 09 74 115 -50 -60
	28 E:\sprites\Clipper\2.PCX 275 5 09 86 93 -20 -45
	29 E:\sprites\Clipper\2.PCX 375 5 09 99 38 -20 -63
	30 E:\sprites\Clipper\2.PCX 425 5 09 86 93 -70 -43
	31 E:\sprites\Clipper\2.PCX 525 5 09 74 115 -60 -60
	32 E:\sprites\Clipper\2.PCX 650 5 09 87 90 -35 -50 
	//sailing full	
	33 E:\sprites\Clipper\3.PCX 5 5 09 99 36 -18 -59
	34 E:\sprites\Clipper\3.PCX 50 5 09 87 89 -58 -49
	35 E:\sprites\Clipper\3.PCX 150 5 09 74 115 -50 -59
	36 E:\sprites\Clipper\3.PCX 275 5 09 86 93 -20 -44
	37 E:\sprites\Clipper\3.PCX 375 5 09 99 38 -20 -62
	38 E:\sprites\Clipper\3.PCX 425 5 09 86 93 -70 -42
	39 E:\sprites\Clipper\3.PCX 525 5 09 74 115 -60 -59
	40 E:\sprites\Clipper\3.PCX 650 5 09 87 90 -35 -49
	//still full
	41 E:\sprites\Clipper\4.PCX 5 5 09 99 36 -18 -59
	42 E:\sprites\Clipper\4.PCX 50 5 09 87 89 -58 -49
	43 E:\sprites\Clipper\4.PCX 150 5 09 74 115 -50 -59
	44 E:\sprites\Clipper\4.PCX 275 5 09 86 93 -20 -44
	45 E:\sprites\Clipper\4.PCX 375 5 09 99 38 -20 -62
	46 E:\sprites\Clipper\4.PCX 425 5 09 86 93 -70 -42
	47 E:\sprites\Clipper\4.PCX 525 5 09 74 115 -60 -59
	48 E:\sprites\Clipper\4.PCX 650 5 09 87 90 -35 -49

	// Var action 2 chain
 	49 * 13	02 02 01 // default cargos - not moving Action 2 ID 01
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	50 * 11	02 02 02 // default cargos - moving  Action 2 ID 02
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	51 * 14	02 02 03 // choose sprites according to vehicle speed Action 2 ID 03
               	81 B4 00 FF //
              	01 // range
           	01 00 00 00 // not moving (speed == 0)
            	02 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	52 * 17	02 02 04 // set refitted capacity according to cargo class Action 2 ID 04
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	41 80 01 00 01 00// PAX class capacity
         	aa 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	53 * 14	02 02 05 // Action 2 id 05
              	81 10 00 FF
              	01 // range
            	04 00 0D 0D // new capacity
            	03 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	54 * 14	02 02 06 // Action 2 ID 06
               	81 0C 00 FF
               	01 // range
             	05 00 36 36 // change vehicle properties
               	03 00 // default 
	55 * 14	02 02 07 // buy menu Action 2 ID 07
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	0A 80 23 23 // text for vehicle window (unless using varact 2 chain, simply return ID of D0 text) 
           	00 00 //otherwise go to next action 2 ID

	//Sound

   	56 * 14	02 02 08 		//Action 2 for ship, ID = 0D
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	57 * 17	02 02 09 			//Action 2 for ship ID = 03
		85 0C 00 FF FF 01 		//Check variable OC
			08 00 33 00 33 00 	//If callback sound (action ID = 2)
			06 00			//otherwise graphics (action id = 1)

	58 * 10	03 02 01 0B 01 FF 07 00 09 00 // Action 3

//Steamer


	// Action 0 Properties
	59 * 48	00 02 		//Action 0 for ships
		11 01 0C 	//Change 17 properties of one ship, ID 0E (steamer)
		03 1e 		//Life
		06 07		//All climates xpt tl
		04 25 		//Model life
		07 1e		//Load speed
		09 01 		//Refittable
		0A 40 		//Cost factor
		0B 20 		//Speed
		0c 00 		//Cargo type = passenger
		0d 82 00 	//Capacity
		0f 4b 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 03 00	// refittable
		19 10 00	//non refittable
		08 FF		//New GFX
		1A 51 36 0A 00 	//Intro date

	// buy menu sprites
	
 	60 * 4    01 02 01 08 // menu sprites
	
	61 * 1    00
 	62 * 1    00
 	63 * 1    00
 	64 * 1    00
 	65 * 1    00
 	66 * 1   00
 	67 E:\sprites\steamer\2.PCX 454 65 09 18 87 -100 -10
 	68 * 1    00

 	69 * 9	02 02 10 // buy menu action 2 ID 10
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	70 * 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	71 E:\sprites\steamer\1.PCX 5 5 09 76 31 -35 -53
	72 E:\sprites\steamer\1.PCX 39 5 09 69 72 -53 -40
	73 E:\sprites\steamer\1.PCX 121 5 09 60 94 -23 -51
	74 E:\sprites\steamer\1.PCX 225 5 09 66 83 -13 -35
	75 E:\sprites\steamer\1.PCX 318 5 09 79 32 -27 -51
	76 E:\sprites\steamer\1.PCX 365 5 09 73 75 -58 -48
	77 E:\sprites\steamer\1.PCX 450 5 09 59 87 -32 -46
	78 E:\sprites\steamer\1.PCX 547 5 09 71 65 5 -35
	//still empty
	79 E:\sprites\steamer\2.PCX 5 5 09 76 31 -35 -53
	80 E:\sprites\steamer\2.PCX 46 5 09 69 72 -53 -40
	81 E:\sprites\steamer\2.PCX 123 5 09 60 94 -23 -51
	82 E:\sprites\steamer\2.PCX 230 5 09 66 83 -13 -35
	83 E:\sprites\steamer\2.PCX 318 5 09 79 32 -27 -51
	84 E:\sprites\steamer\2.PCX 365 5 09 73 75 -58 -48
	85 E:\sprites\steamer\2.PCX 454 5 09 59 87 -32 -46
	86 E:\sprites\steamer\2.PCX 549 5 09 71 65 5 -35
	//sailing full	
	87 E:\sprites\steamer\3.PCX 5 5 09 76 31 -35 -52
	88 E:\sprites\steamer\3.PCX 39 5 09 69 72 -53 -39
	89 E:\sprites\steamer\3.PCX 121 5 09 60 94 -23 -50
	90 E:\sprites\steamer\3.PCX 225 5 09 66 83 -13 -34
	91 E:\sprites\steamer\3.PCX 318 5 09 79 32 -27 -50
	92 E:\sprites\steamer\3.PCX 365 5 09 73 75 -58 -47
	93 E:\sprites\steamer\3.PCX 450 5 09 59 87 -32 -45
	94 E:\sprites\steamer\3.PCX 547 5 09 71 65 5 -34
	//still full
	95 E:\sprites\steamer\4.PCX 5 5 09 76 31 -35 -52
	96 E:\sprites\steamer\4.PCX 46 5 09 69 72 -53 -39
	97 E:\sprites\steamer\4.PCX 123 5 09 60 94 -23 -50
	98 E:\sprites\steamer\4.PCX 230 5 09 66 83 -13 -34
	99 E:\sprites\steamer\4.PCX 323 5 09 79 32 -27 -50
	100 E:\sprites\steamer\4.PCX 365 5 09 73 75 -58 -47
	101 E:\sprites\steamer\4.PCX 454 5 09 59 87 -32 -45
	102 E:\sprites\steamer\4.PCX 549 5 09 71 65 5 -34

	// Var action 2 chain
 	103 * 13	02 02 11 // default cargos - not moving Action 2 ID 11
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	104 * 11	02 02 12 // default cargos - moving  Action 2 ID 12
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	105 * 14	02 02 13 // choose sprites according to vehicle speed Action 2 ID 13
               	81 B4 00 FF //
              	01 // range
           	11 00 00 00 // not moving (speed == 0)
            	12 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	106 * 17	02 02 14 // set refitted capacity according to cargo class Action 2 ID 14
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	82 80 01 00 01 00// PAX class capacity
         	50 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	107 * 14	02 02 15 // Action 2 id 15
              	81 10 00 FF
              	01 // range
            	14 00 0D 0D // new capacity
            	13 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	108 * 14	02 02 16 // Action 2 ID 06
               	81 0C 00 FF
               	01 // range
             	15 00 36 36 // change vehicle properties
               	13 00 // default 
	109 * 14	02 02 17 // buy menu Action 2 ID 17
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	1A 80 23 23 // text for vehicle window (unless using varact 2 chain, simply return ID of D0 text) 
           	10 00 //otherwise go to next action 2 ID 10

	//Sound

   	110 * 14	02 02 18 		//Action 2 for ship, ID = D
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	111 * 17	02 02 19 			//Action 2 for ship ID = 03
		85 0C 00 FF FF 01 		//Check variable OC
			18 00 33 00 33 00 	//If callback sound (action ID = 2)
			16 00			//otherwise graphics (action id = 1)

	112 * 10	03 02 01 0C 01 FF 17 00 19 00 // Action 3

//Merchantman

	// Action 0 Properties
	113 * 48	00 02 		//Action 0 for ships
		11 01 0D 	//Change 17 properties of one ship, ID 0F (merchantman)
		03 28 		//Life
		06 07		//All climates xpt tl
		04 94 		//Model life
		07 1E		//Load speed
		09 01 		//Refittable
		0A 7D 		//Cost factor
		0B 23 		//Speed
		0c 05 		//Cargo type = Goods
		0d 64 00 	//Capacity
		0f 50 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 FF 00	// refittable all
		19 00 00	//non refittable
		08 FF		//New GFX
		1A 1A 7B 09 00 	//Intro date

	// buy menu sprites
	
 	114 * 4    01 02 01 08 // menu sprites
	
	115 * 1    00
 	116 * 1    00
 	117 * 1    00
 	118 * 1    00
 	119 * 1    00
 	120 * 1   00
 	121 E:\sprites\merchantman\2.PCX 400 64 09 16 65 -100 -10
 	122 * 1    00

 	123 * 9	02 02 20 // buy menu action 2 ID 20
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	124* 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	125 E:\sprites\merchantman\1.PCX 5 5 09 71 27 -14 -48
	126 E:\sprites\merchantman\1.PCX 40 5 09 61 69 -57 -23
	127 E:\sprites\merchantman\1.PCX 120 5 09 55 82 -35 -40
	128 E:\sprites\merchantman\1.PCX 210 5 09 61 74 -12 -30
	129 E:\sprites\merchantman\1.PCX 290 5 09 70 25 -12 -45
	130 E:\sprites\merchantman\1.PCX 320 5 09 62 70 -58 -28
	131 E:\sprites\merchantman\1.PCX 400 5 09 55 85 -42 -40
	132 E:\sprites\merchantman\1.PCX 490 5 09 64 69 -15 -25
	//still empty
	133 E:\sprites\merchantman\2.PCX 5 5 09 71 27 -14 -48
	134 E:\sprites\merchantman\2.PCX 40 5 09 61 69 -57 -23
	135 E:\sprites\merchantman\2.PCX 120 5 09 55 82 -35 -40
	136 E:\sprites\merchantman\2.PCX 210 5 09 61 74 -12 -30
	137 E:\sprites\merchantman\2.PCX 290 5 09 70 25 -12 -45
	138 E:\sprites\merchantman\2.PCX 320 5 09 62 70 -58 -28
	139 E:\sprites\merchantman\2.PCX 400 5 09 55 85 -42 -40
	140 E:\sprites\merchantman\2.PCX 490 5 09 64 69 -15 -25
	//sailing full	
	141 E:\sprites\merchantman\3.PCX 5 5 09 71 27 -14 -47
	142 E:\sprites\merchantman\3.PCX 40 5 09 61 69 -57 -22
	143 E:\sprites\merchantman\3.PCX 120 5 09 55 82 -35 -40
	144 E:\sprites\merchantman\3.PCX 210 5 09 61 74 -12 -29
	145 E:\sprites\merchantman\3.PCX 290 5 09 70 25 -12 -44
	146 E:\sprites\merchantman\3.PCX 320 5 09 62 70 -58 -27
	147 E:\sprites\merchantman\3.PCX 400 5 09 55 85 -42 -39
	148 E:\sprites\merchantman\3.PCX 490 5 09 64 69 -15 -24
	//still full
	149 E:\sprites\merchantman\4.PCX 5 5 09 71 27 -14 -47
	150 E:\sprites\merchantman\4.PCX 40 5 09 61 69 -57 -22
	151 E:\sprites\merchantman\4.PCX 120 5 09 55 82 -35 -40
	152 E:\sprites\merchantman\4.PCX 210 5 09 61 74 -12 -29
	153 E:\sprites\merchantman\4.PCX 290 5 09 70 25 -12 -44
	154 E:\sprites\merchantman\4.PCX 320 5 09 62 70 -58 -27
	155 E:\sprites\merchantman\4.PCX 400 5 09 55 85 -42 -39
	156 E:\sprites\merchantman\4.PCX 490 5 09 64 69 -15 -24

	// Var action 2 chain
 	157 * 13	02 02 21 // default cargos - not moving Action 2 ID 21
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	158 * 11	02 02 22 // default cargos - moving  Action 2 ID 22
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	159 * 14	02 02 23 // choose sprites according to vehicle speed Action 2 ID 23
               	81 B4 00 FF //
              	01 // range
           	21 00 00 00 // not moving (speed == 0)
            	22 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	160 * 17	02 02 24 // set refitted capacity according to cargo class Action 2 ID 24
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	32 80 01 00 01 00// PAX class capacity
         	64 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	161 * 14	02 02 25 // Action 2 id 25
              	81 10 00 FF
              	01 // range
            	24 00 0D 0D // new capacity
            	23 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	162 * 14	02 02 26 // Action 2 ID 26
               	81 0C 00 FF
               	01 // range
             	25 00 36 36 // change vehicle properties
               	23 00 // default 
	163 * 14	02 02 27 // buy menu Action 2 ID 27
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	2A 80 23 23
           	20 00 //otherwise go to next action 2 ID

	//Sound

   	164 * 14	02 02 28 		//Action 2 for ship, ID = 28
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	165 * 17	02 02 29 			//Action 2 for ship ID = 29
		85 0C 00 FF FF 01 		//Check variable OC
			28 00 33 00 33 00 	//If callback sound
			26 00			//otherwise graphicW

	166 * 10	03 02 01 0D 01 FF 27 00 29 00 // Action 3

//Barque

	// Action 0 Properties
	167 * 48	00 02 		//Action 0 for ships
		11 01 0E 	//Change 17 properties of one ship, ID 10 (barque)
		03 28 		//Life
		06 07		//All climates xpt tl
		04 3C 		//Model life
		07 1E		//Load speed
		09 01 		//Refittable
		0A 8C 		//Cost factor
		0B 1D 		//Speed
		0c 05 		//Cargo type = Goods
		0d 6E 00 	//Capacity
		0f 40 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 FF 00	// refittable all
		19 00 00	//non refittable
		08 FF		//New GFX
		1A 82 FB 09 00 	//Intro date

	// buy menu sprites
	
 	168 * 4    01 02 01 08 // menu sprites
	
	169 * 1    00
 	170 * 1    00
 	171 * 1    00
 	172 * 1    00
 	173 * 1    00
 	174 * 1   00
 	175 E:\sprites\barque\2.PCX 400 64 09 16 65 -100 -10
 	176 * 1    00

 	177 * 9	02 02 30 // buy menu action 2 ID 30
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	178 * 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	179 E:\sprites\barque\1.PCX 5 5 09 71 27 -14 -48
	180 E:\sprites\barque\1.PCX 40 5 09 61 69 -57 -23
	181 E:\sprites\barque\1.PCX 120 5 09 55 82 -35 -40
	182 E:\sprites\barque\1.PCX 210 5 09 61 74 -12 -30
	183 E:\sprites\barque\1.PCX 290 5 09 70 25 -12 -45
	184 E:\sprites\barque\1.PCX 320 5 09 62 70 -58 -28
	185 E:\sprites\barque\1.PCX 400 5 09 55 85 -42 -40
	186 E:\sprites\barque\1.PCX 490 5 09 64 69 -15 -25
	//still empty
	187 E:\sprites\barque\2.PCX 5 5 09 71 27 -14 -48
	188 E:\sprites\barque\2.PCX 40 5 09 61 69 -57 -23
	189 E:\sprites\barque\2.PCX 120 5 09 55 82 -35 -40
	190 E:\sprites\barque\2.PCX 210 5 09 61 74 -12 -30
	191 E:\sprites\barque\2.PCX 290 5 09 70 25 -12 -45
	192 E:\sprites\barque\2.PCX 320 5 09 62 70 -58 -28
	193 E:\sprites\barque\2.PCX 400 5 09 55 85 -42 -40
	194 E:\sprites\barque\2.PCX 490 5 09 64 69 -15 -25
	//sailing full	
	195 E:\sprites\barque\3.PCX 5 5 09 71 27 -14 -47
	196 E:\sprites\barque\3.PCX 40 5 09 61 69 -57 -22
	197 E:\sprites\barque\3.PCX 120 5 09 55 82 -35 -40
	198 E:\sprites\barque\3.PCX 210 5 09 61 74 -12 -29
	199 E:\sprites\barque\3.PCX 290 5 09 70 25 -12 -44
	200 E:\sprites\barque\3.PCX 320 5 09 62 70 -58 -27
	201 E:\sprites\barque\3.PCX 400 5 09 55 85 -42 -39
	202 E:\sprites\barque\3.PCX 490 5 09 64 69 -15 -24
	//still full
	203 E:\sprites\barque\4.PCX 5 5 09 71 27 -14 -47
	204 E:\sprites\barque\4.PCX 40 5 09 61 69 -57 -22
	205 E:\sprites\barque\4.PCX 120 5 09 55 82 -35 -40
	206 E:\sprites\barque\4.PCX 210 5 09 61 74 -12 -29
	207 E:\sprites\barque\4.PCX 290 5 09 70 25 -12 -44
	208 E:\sprites\barque\4.PCX 320 5 09 62 70 -58 -27
	209 E:\sprites\barque\4.PCX 400 5 09 55 85 -42 -39
	210 E:\sprites\barque\4.PCX 490 5 09 64 69 -15 -24

	// Var action 2 chain
 	211 * 13	02 02 31 // default cargos - not moving Action 2 ID 31
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	212 * 11	02 02 32 // default cargos - moving  Action 2 ID 32
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	213 * 14	02 02 33 // choose sprites according to vehicle speed Action 2 ID 33
               	81 B4 00 FF //
              	01 // range
           	31 00 00 00 // not moving (speed == 0)
            	32 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	214 * 17	02 02 34 // set refitted capacity according to cargo class Action 2 ID 34
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	37 80 01 00 01 00// PAX class capacity
         	6E 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	215 * 14	02 02 35 // Action 2 id 35
              	81 10 00 FF
              	01 // range
            	34 00 0D 0D // new capacity
            	33 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	216 * 14	02 02 36 // Action 2 ID 26
               	81 0C 00 FF
               	01 // range
             	35 00 36 36 // change vehicle properties
               	33 00 // default 
	217 * 14	02 02 37 // buy menu Action 2 ID 27
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	3A 80 23 23
           	30 00 //otherwise go to next action 2 ID

	//Sound

   	218 * 14	02 02 38 		//Action 2 for ship, ID = 38
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	219 * 17	02 02 39 			//Action 2 for ship ID = 39
		85 0C 00 FF FF 01 		//Check variable OC
			38 00 33 00 33 00 	//If callback sound
			36 00			//otherwise graphicW

	220 * 10	03 02 01 0E 01 FF 37 00 39 00 // Action 3

//schooner

	// Action 0 Properties
	221 * 48	00 02 		//Action 0 for ships
		11 01 0F	//Change 17 properties of one ship, ID 12 (schooner)
		03 28 		//Life
		06 07		//All climates xpt tl
		04 5A 		//Model life
		07 1E		//Load speed
		09 01 		//Refittable
		0A 46 		//Cost factor
		0B 29 		//Speed
		0c 05 		//Cargo type = Goods
		0d 28 00 	//Capacity
		0f 28 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 FF 00	// refittable all
		19 00 00	//non refittable
		08 FF		//New GFX
		1A 92 09 0A 00 	//Intro date

	// buy menu sprites
	
 	222 * 4    01 02 01 08 // menu sprites
	
	223 * 1    00
 	224 * 1    00
 	225 * 1    00
 	226 * 1    00
 	227 * 1    00
 	228 * 1   00
 	229 E:\sprites\schooner\2.PCX 400 64 09 16 47 -100 -10
 	230 * 1    00

 	231 * 9	02 02 40 // buy menu action 2 ID 40
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	232 * 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	233 E:\sprites\schooner\1.PCX 5 5 09 71 27 -14 -48
	234 E:\sprites\schooner\1.PCX 40 5 09 61 69 -57 -23
	235 E:\sprites\schooner\1.PCX 120 5 09 55 82 -35 -40
	236 E:\sprites\schooner\1.PCX 210 5 09 61 74 -12 -30
	237 E:\sprites\schooner\1.PCX 290 5 09 70 25 -12 -45
	238 E:\sprites\schooner\1.PCX 320 5 09 62 70 -58 -28
	239 E:\sprites\schooner\1.PCX 400 5 09 55 85 -42 -40
	240 E:\sprites\schooner\1.PCX 490 5 09 64 69 -15 -25
	//still empty
	241 E:\sprites\schooner\2.PCX 5 5 09 71 27 -14 -48
	242 E:\sprites\schooner\2.PCX 40 5 09 61 69 -57 -23
	243 E:\sprites\schooner\2.PCX 120 5 09 55 82 -35 -40
	244 E:\sprites\schooner\2.PCX 210 5 09 61 74 -12 -30
	245 E:\sprites\schooner\2.PCX 290 5 09 70 25 -12 -45
	246 E:\sprites\schooner\2.PCX 320 5 09 62 70 -58 -28
	247 E:\sprites\schooner\2.PCX 400 5 09 55 85 -42 -40
	248 E:\sprites\schooner\2.PCX 490 5 09 64 69 -15 -25
	//sailing full	
	249 E:\sprites\schooner\3.PCX 5 5 09 71 27 -14 -47
	250 E:\sprites\schooner\3.PCX 40 5 09 61 69 -57 -22
	251 E:\sprites\schooner\3.PCX 120 5 09 55 82 -35 -40
	252 E:\sprites\schooner\3.PCX 210 5 09 61 74 -12 -29
	253 E:\sprites\schooner\3.PCX 290 5 09 70 25 -12 -44
	254 E:\sprites\schooner\3.PCX 320 5 09 62 70 -58 -27
	255 E:\sprites\schooner\3.PCX 400 5 09 55 85 -42 -39
	256 E:\sprites\schooner\3.PCX 490 5 09 64 69 -15 -24
	//still full
	257 E:\sprites\schooner\4.PCX 5 5 09 71 27 -14 -47
	258 E:\sprites\schooner\4.PCX 40 5 09 61 69 -57 -22
	259 E:\sprites\schooner\4.PCX 120 5 09 55 82 -35 -40
	260 E:\sprites\schooner\4.PCX 210 5 09 61 74 -12 -29
	261 E:\sprites\schooner\4.PCX 290 5 09 70 25 -12 -44
	262 E:\sprites\schooner\4.PCX 320 5 09 62 70 -58 -27
	263 E:\sprites\schooner\4.PCX 400 5 09 55 85 -42 -39
	264 E:\sprites\schooner\4.PCX 490 5 09 64 69 -15 -24

	// Var action 2 chain
 	265 * 13	02 02 41 // default cargos - not moving Action 2 ID 41
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	266 * 11	02 02 42 // default cargos - moving  Action 2 ID 42
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	267 * 14	02 02 43 // choose sprites according to vehicle speed Action 2 ID 43
               	81 B4 00 FF //
              	01 // range
           	41 00 00 00 // not moving (speed == 0)
            	42 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	268 * 17	02 02 44 // set refitted capacity according to cargo class Action 2 ID 44
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	14 80 01 00 01 00// PAX class capacity
         	28 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	269 * 14	02 02 45 // Action 2 id 45
              	81 10 00 FF
              	01 // range
            	44 00 0D 0D // new capacity
            	43 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	270 * 14	02 02 46 // Action 2 ID 46
               	81 0C 00 FF
               	01 // range
             	45 00 36 36 // change vehicle properties
               	43 00 // default 
	271 * 14	02 02 47 // buy menu Action 2 ID 47
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	4A 80 23 23
           	40 00 //otherwise go to next action 2 ID

	//Sound

   	272 * 14	02 02 48 		//Action 2 for ship, ID = 48
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	273 * 17	02 02 49 			//Action 2 for ship ID = 49
		85 0C 00 FF FF 01 		//Check variable OC
			48 00 33 00 33 00 	//If callback sound
			46 00			//otherwise graphic

	274 * 10	03 02 01 0F 01 FF 47 00 49 00 // Action 3


//Brig

	275 * 48	00 02 		//Action 0 for ships
		11 01 10 	//Change 17 properties of one ship, ID 10
		03 28 		//Life
		06 07		//All climates xpt tl
		04 94 		//Model life
		07 1E		//Load speed
		09 01 		//Refittable
		0A 3F 		//Cost factor
		0B 1D 		//Speed
		0c 05 		//Cargo type = Goods
		0d 32 00 	//Capacity
		0f 28 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 FF 00	// refittable all
		19 00 00	//non refittable
		08 FF		//New GFX
		1A 1A 7B 09 00 	//Intro date

	// buy menu sprites
	
 	276 * 4    01 02 01 08 // menu sprites
	
	277 * 1    00
 	278 * 1    00
 	279 * 1    00
 	280 * 1    00
 	281 * 1    00
 	282 * 1   00
 	283 E:\sprites\brig\2.PCX 400 63 09 16 51 -100 -10
 	284 * 1    00

 	285 * 9	02 02 50 // buy menu action 2 ID 50
      		01 
      		01 
      		00 00 
      		00 00 

 	286* 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	287 E:\sprites\brig\1.PCX 5 5 09 71 27 -14 -48
	288 E:\sprites\brig\1.PCX 40 5 09 61 69 -57 -23
	289 E:\sprites\brig\1.PCX 120 5 09 55 82 -35 -40
	290 E:\sprites\brig\1.PCX 210 5 09 61 74 -12 -30
	291 E:\sprites\brig\1.PCX 290 5 09 70 25 -12 -45
	292 E:\sprites\brig\1.PCX 320 5 09 62 70 -58 -28
	293 E:\sprites\brig\1.PCX 400 5 09 55 85 -42 -40
	294 E:\sprites\brig\1.PCX 490 5 09 64 69 -15 -25
	//still empty
	295 E:\sprites\brig\2.PCX 5 5 09 71 27 -14 -48
	296 E:\sprites\brig\2.PCX 40 5 09 61 69 -57 -23
	297 E:\sprites\brig\2.PCX 120 5 09 55 82 -35 -40
	298 E:\sprites\brig\2.PCX 210 5 09 61 74 -12 -30
	299 E:\sprites\brig\2.PCX 290 5 09 70 25 -12 -45
	300 E:\sprites\brig\2.PCX 320 5 09 62 70 -58 -28
	301 E:\sprites\brig\2.PCX 400 5 09 55 85 -42 -40
	302 E:\sprites\brig\2.PCX 490 5 09 64 69 -15 -25
	//sailing full	
	303 E:\sprites\brig\3.PCX 5 5 09 71 27 -14 -47
	304 E:\sprites\brig\3.PCX 40 5 09 61 69 -57 -22
	305 E:\sprites\brig\3.PCX 120 5 09 55 82 -35 -40
	306 E:\sprites\brig\3.PCX 210 5 09 61 74 -12 -29
	307 E:\sprites\brig\3.PCX 290 5 09 70 25 -12 -44
	308 E:\sprites\brig\3.PCX 320 5 09 62 70 -58 -27
	309 E:\sprites\brig\3.PCX 400 5 09 55 85 -42 -39
	310 E:\sprites\brig\3.PCX 490 5 09 64 69 -15 -24
	//still full
	311 E:\sprites\brig\4.PCX 5 5 09 71 27 -14 -47
	312 E:\sprites\brig\4.PCX 40 5 09 61 69 -57 -22
	313 E:\sprites\brig\4.PCX 120 5 09 55 82 -35 -40
	314 E:\sprites\brig\4.PCX 210 5 09 61 74 -12 -29
	315 E:\sprites\brig\4.PCX 290 5 09 70 25 -12 -44
	316 E:\sprites\brig\4.PCX 320 5 09 62 70 -58 -27
	317 E:\sprites\brig\4.PCX 400 5 09 55 85 -42 -39
	318 E:\sprites\brig\4.PCX 490 5 09 64 69 -15 -24

	// Var action 2 chain
 	319 * 13	02 02 51 // default cargos - not moving Action 2 ID 51
      		02 
      		02 
      		01 00 03 00
      		01 00 03 00

	320 * 11	02 02 52 // default cargos - moving  Action 2 ID 52
      		02 
      		01 
      		00 00 02 00 
      		00 00

	321 * 14	02 02 53 // choose sprites according to vehicle speed Action 2 ID 53
               	81 B4 00 FF 
              	01 
           	51 00 00 00 // not moving (speed == 0) go to 51
            	52 00 // moving (speed != 0) go to 52


	322 * 17	02 02 54 // set refitted capacity according to cargo class Action 2 ID 54
        	85 47 10 01 00 
              	01
            	19 80 01 00 01 00// PAX class capacity
         	32 80 // default capacity
                  
	

 	323 * 14	02 02 55 // Action 2 id 55
              	81 10 00 FF
              	01 
            	54 00 0D 0D //go to 54
            	53 00 //go to 53

	
	324 * 14	02 02 56 // Action 2 ID 56
               	81 0C 00 FF
               	01 
             	55 00 36 36 //go to 55
               	53 00 // go to 53

	325 * 14	02 02 57 // buy menu Action 2 ID 57
               	81 0C 00 FF
               	01 
              	5A 80 23 23
           	50 00 // go to 50

	//Sound

   	326 * 14	02 02 58 		//Action 2 for ship, ID = 58
		81 10 00 FF 01 		
			49 80 01 01 	
			50 00 		

  	327 * 17	02 02 59 			//Action 2 for ship ID = 59
		85 0C 00 FF FF 01
			58 00 33 00 33 00 	// go to 58
			56 00			// go to 56

	328 * 10	03 02 01 10 01 FF 57 00 59 00 // Action 3 for ship 10 go to 57 or 59

//Steamship


	// Action 0 Properties
	329 * 50 00 02 		//Action 0 for ships
		11 01 11 	//Change 17 properties of one ship, ID 0E (steamer)
		03 1e 		//Life
		06 07		//All climates xpt tl
		04 1e 		//Model life
		07 1e		//Load speed
		09 01 		//Refittable
		0A e9 		//Cost factor
		0B 40 		//Speed
		0c 00 		//Cargo type = passenger
		0d 04 01 	//Capacity
		0f 85 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 03 00	// refittable
		19 10 00	//non refittable
		08 FF		//New GFX
		1A 51 53 0A 00 	//Intro date


	// buy menu sprites
	
 	330 * 4    01 02 01 08 // menu sprites
	
	331 * 1    00
 	332 * 1    00
 	333 * 1    00
 	334 * 1    00
 	335 * 1    00
 	336 * 1   00
 	337 E:\sprites\brittanic\2.PCX 600 68 09 26 75 -30 -15
 	338 * 1    00

 	339 * 9	02 02 60 // buy menu action 2 ID 60
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	340 * 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	341 E:\sprites\Brittanic\1.PCX 5 5 09 105 29 -12 -50
	342 E:\sprites\Brittanic\1.PCX 40 5 09 91 114 -75 -40
	343 E:\sprites\Brittanic\1.PCX 160 5 09 51 150 -75 -30
	344 E:\sprites\Brittanic\1.PCX 315 5 09 91 115 -40 -40
	345 E:\sprites\Brittanic\1.PCX 441 5 09 105 28 -12 -55
	346 E:\sprites\Brittanic\1.PCX 475 5 09 91 115 -85 -38
	347 E:\sprites\Brittanic\1.PCX 600 5 09 51 150 -80 -30
	348 E:\sprites\Brittanic\1.PCX 755 5 09 91 115 -30 -35
	//still empty
	349 E:\sprites\Brittanic\2.PCX 5 5 09 105 28 -12 -50
	350 E:\sprites\Brittanic\2.PCX 40 5 09 91 114 -75 -40
	351 E:\sprites\Brittanic\2.PCX 160 5 09 51 150 -75 -30
	352 E:\sprites\Brittanic\2.PCX 315 5 09 91 115 -40 -40
	353 E:\sprites\Brittanic\2.PCX 441 5 09 105 28 -12 -55
	354 E:\sprites\Brittanic\2.PCX 475 5 09 91 115 -85 -38
	355 E:\sprites\Brittanic\2.PCX 600 5 09 51 150 -80 -30
	356 E:\sprites\Brittanic\2.PCX 755 5 09 91 115 -30 -35
	//sailing full	
	357 E:\sprites\Brittanic\3.PCX 5 5 09 105 29 -12 -50
	358 E:\sprites\Brittanic\3.PCX 40 5 09 91 114 -75 -40
	359 E:\sprites\Brittanic\3.PCX 160 5 09 51 150 -75 -30
	360 E:\sprites\Brittanic\3.PCX 315 5 09 91 115 -40 -40
	361 E:\sprites\Brittanic\3.PCX 441 5 09 105 28 -12 -55
	362 E:\sprites\Brittanic\3.PCX 475 5 09 91 115 -85 -38
	363 E:\sprites\Brittanic\3.PCX 600 5 09 51 150 -80 -30
	364 E:\sprites\Brittanic\3.PCX 755 5 09 91 115 -30 -35
	//still full
	365 E:\sprites\Brittanic\4.PCX 5 5 09 105 28 -12 -50
	366 E:\sprites\Brittanic\4.PCX 40 5 09 91 114 -75 -40
	367 E:\sprites\Brittanic\4.PCX 160 5 09 51 150 -75 -30
	368 E:\sprites\Brittanic\4.PCX 315 5 09 91 115 -40 -40
	369 E:\sprites\Brittanic\4.PCX 441 5 09 105 28 -12 -55
	370 E:\sprites\Brittanic\4.PCX 475 5 09 91 115 -85 -38
	371 E:\sprites\Brittanic\4.PCX 600 5 09 51 150 -80 -30
	372 E:\sprites\Brittanic\4.PCX 755 5 09 91 115 -30 -35

	// Var action 2 chain
 	373 * 13	02 02 61 // default cargos - not moving Action 2 ID 61
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	374 * 11	02 02 62 // default cargos - moving  Action 2 ID 62
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	375 * 14	02 02 63 // choose sprites according to vehicle speed Action 2 ID 63
               	81 B4 00 FF //
              	01 // range
           	61 00 00 00 // not moving (speed == 0)
            	62 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	376 * 18 02 02 64 // set refitted capacity according to cargo class Action 2 ID 14
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	04 01 01 00 01 00// PAX class capacity
         	82 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	377 * 14	02 02 65 // Action 2 id 65
              	81 10 00 FF
              	01 // range
            	64 00 0D 0D // new capacity
            	63 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	378 * 14	02 02 66 // Action 2 ID 66
               	81 0C 00 FF
               	01 // range
             	65 00 36 36 // change vehicle properties
               	63 00 // default 
	379 * 14	02 02 67 // buy menu Action 2 ID 67
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	6A 80 23 23 // text for vehicle window (unless using varact 2 chain, simply return ID of D0 text) 
           	60 00 //otherwise go to next action 2 ID 10

	//Sound

   	380 * 14	02 02 68 		//Action 2 for ship, ID = D
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	381 * 17	02 02 69 			//Action 2 for ship ID = 03
		85 0C 00 FF FF 01 		//Check variable OC
			68 00 33 00 33 00 	//If callback sound (action ID = 2)
			66 00			//otherwise graphics (action id = 1)

	382 * 10	03 02 01 11 01 FF 67 00 69 00 // Action 3



//Windjammer

	// Action 0 Properties
	383 * 48	00 02 		//Action 0 for ships
		11 01 12 	//Change 17 properties of one ship, ID 12 (clipper)
		03 1e 		//Life
		06 07		//All climates xpt tl
		04 3c 		//Model life
		07 1e		//Load speed
		09 01 		//Refittable
		0A a6 		//Cost factor
		0B 33 		//Speed
		0c 01 		//Cargo type = coal
		0d fa 00 	//Capacity
		0f 70 		//Running cost
		11 00 00 00 00	//Cargo refit mask
		12 80
		17 12		//2 cc
		18 FF 00	// refittable all
		19 00 00	//non refittable
		08 FF		//New GFX
		1A 51 73 0A 00 	//Intro date

	// buy menu sprites
	
 	384 * 4    01 02 01 08 // menu sprites
	
	385 * 1    00
 	386 * 1    00
 	387 * 1    00
 	388 * 1    00
 	389 * 1    00
 	390 * 1   00
 	391 E:\sprites\windjammer\2.PCX 525 84 09 15 93 -150 -10
 	392 * 1    00

 	393 * 9	02 02 70 // buy menu action 2 ID 00
      		01 // number loaded states
      		01 // loading states
      		00 00 // loaded sprites
      		00 00 // loading sprites

 	394 * 4 	01 02 04 08 // ship sprites
	
	//sailing empty
	395 E:\sprites\windjammer\1.PCX 5 5 09 99 36 -18 -60
	396 E:\sprites\windjammer\1.PCX 50 5 09 87 89 -58 -50
	397 E:\sprites\windjammer\1.PCX 150 5 09 74 115 -50 -60
	398 E:\sprites\windjammer\1.PCX 275 5 09 86 93 -20 -45
	399 E:\sprites\windjammer\1.PCX 375 5 09 99 38 -20 -63
	400 E:\sprites\windjammer\1.PCX 425 5 09 86 93 -70 -43
	401 E:\sprites\windjammer\1.PCX 525 5 09 74 115 -60 -60
	402 E:\sprites\windjammer\1.PCX 650 5 09 87 90 -35 -50 
	//still empty
	403 E:\sprites\windjammer\2.PCX 5 5 09 99 36 -18 -61
	404 E:\sprites\windjammer\2.PCX 50 5 09 87 89 -58 -50
	405 E:\sprites\windjammer\2.PCX 150 5 09 74 115 -50 -60
	406 E:\sprites\windjammer\2.PCX 275 5 09 86 93 -20 -45
	407 E:\sprites\windjammer\2.PCX 375 5 09 99 38 -20 -63
	408 E:\sprites\windjammer\2.PCX 425 5 09 86 93 -70 -43
	409 E:\sprites\windjammer\2.PCX 525 5 09 74 115 -60 -60
	410 E:\sprites\windjammer\2.PCX 650 5 09 87 90 -35 -50 
	//sailing full	
	411 E:\sprites\windjammer\3.PCX 5 5 09 99 36 -18 -59
	412 E:\sprites\windjammer\3.PCX 50 5 09 87 89 -58 -49
	413 E:\sprites\windjammer\3.PCX 150 5 09 74 115 -50 -59
	414 E:\sprites\windjammer\3.PCX 275 5 09 86 93 -20 -44
	415 E:\sprites\windjammer\3.PCX 375 5 09 99 38 -20 -62
	416 E:\sprites\windjammer\3.PCX 425 5 09 86 93 -70 -42
	417 E:\sprites\windjammer\3.PCX 525 5 09 74 115 -60 -59
	418 E:\sprites\windjammer\3.PCX 650 5 09 87 90 -35 -49
	//still full
	419 E:\sprites\windjammer\4.PCX 5 5 09 99 36 -18 -59
	420 E:\sprites\windjammer\4.PCX 50 5 09 87 89 -58 -49
	421 E:\sprites\windjammer\4.PCX 150 5 09 74 115 -50 -59
	422 E:\sprites\windjammer\4.PCX 275 5 09 86 93 -20 -44
	423 E:\sprites\windjammer\4.PCX 375 5 09 99 38 -20 -62
	424 E:\sprites\windjammer\4.PCX 425 5 09 86 93 -70 -42
	425 E:\sprites\windjammer\4.PCX 525 5 09 74 115 -60 -59
	426 E:\sprites\windjammer\4.PCX 650 5 09 87 90 -35 -49

	// Var action 2 chain
 	427 * 13	02 02 71 // default cargos - not moving Action 2 ID 71
      		02 // number loaded states
      		02 // number loading states
      		01 00 03 00// loaded sprites
      		01 00 03 00// loading sprites

	428 * 11	02 02 72 // default cargos - moving  Action 2 ID 72
      		02 // number loaded states
      		01 // number loading states
      		00 00 02 00 // loaded sprites
      		00 00// loading sprites (n/a if moving)

	429 * 14	02 02 73 // choose sprites according to vehicle speed Action 2 ID 73
               	81 B4 00 FF //
              	01 // range
           	71 00 00 00 // not moving (speed == 0)
            	72 00 // moving (speed != 0) 

	// warning about default result being same as earlier - can be valid when freight capacity == PAX capacity
	//@@WARNING DISABLE 100
	430 * 17	02 02 74 // set refitted capacity according to cargo class Action 2 ID 04
        	85 47 10 01 00 // var 47 in format ccccwwtt where I want cccc; mask for just bit 0 (PAX class)
              	01 // range
            	78 80 01 00 01 00// PAX class capacity
         	fa 80 // default capacity
                  
	//@@WARNING ENABLE 100

 	431 * 14	02 02 75 // Action 2 id 05
              	81 10 00 FF
              	01 // range
            	74 00 0D 0D // new capacity
            	73 00 // default (end cb36 checks using ID for applying graphics)

	// handle callbacks etc - use separate varaction 2s for 'real' vehicles and buy menu - shared cb chain, different graphics IDs 
	432 * 14	02 02 76 // Action 2 ID 06
               	81 0C 00 FF
               	01 // range
             	75 00 36 36 // change vehicle properties
               	73 00 // default 
	433 * 14 02 02 77 // buy menu Action 2 ID 07
               	81 0C 00 FF //handle callbacks for buy menu
               	01 // range
              	7A 80 23 23 // text for vehicle window (unless using varact 2 chain, simply return ID of D0 text) 
           	70 00 //otherwise go to next action 2 ID

	//Sound

   	434 * 14	02 02 78 		//Action 2 for ship, ID = 0D
		81 10 00 FF 01 		//Check variable 10
			49 80 01 01 	//If value for effect 1 is 80, callback with sound 49
			00 00 		//Or return no value

  	435 * 17	02 02 79 			//Action 2 for ship ID = 03
		85 0C 00 FF FF 01 		//Check variable OC
			78 00 33 00 33 00 	//If callback sound (action ID = 2)
			76 00			//otherwise graphics (action id = 1)

	436 * 10	03 02 01 12 01 FF 77 00 79 00 // Action 3




//text

	437 * 27	04 02 81
		01 0A D0 
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 63 6c 69 70 70 65 72 00
		
	438 * 53	04 02 81
		01 1A D0 
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 73 68 69 70 20 77 69 74 68 20 70 61 64 64 6c 65 73 20 66 6f 72 20 6c 69 67 68 74 20 77 69 6e 64 73 00

	439 * 24	04 02 81
		01 2A D0 
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 73 68 69 70 00

	440 * 55	04 02 81
		01 3A D0 
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 73 68 69 70 2c 20 6c 61 73 74 20 6d 61 73 74 20 72 69 67 67 65 64 20 66 6f 72 65 20 61 6e 64 20 61 66 74 00

	441 * 32	04 02 81
		01 4A D0 
		88 46 6f 72 65 20 61 6e 64 20 61 66 74 20 72 69 67 67 65 64 20 73 68 69 70 00

	442 * 24	04 02 81
		01 5A D0 
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 73 68 69 70 00

	443 * 	41	04 02 81
		01 6A D0
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 73 68 69 70 20 77 69 74 68 20 73 74 65 61 6d 20 73 63 72 65 77 00

	444 * 39	04 02 81
		01 7A D0
		88 46 75 6c 6c 20 72 69 67 67 65 64 20 73 68 69 70 20 66 6f 72 20 62 75 6c 6b 20 63 61 72 67 6f 00